/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface WildcatArchControllerInterface extends utils.Interface {
  functions: {
    "cancelOwnershipHandover()": FunctionFragment;
    "completeOwnershipHandover(address)": FunctionFragment;
    "getRegisteredBorrowers()": FunctionFragment;
    "getRegisteredBorrowers(uint256,uint256)": FunctionFragment;
    "getRegisteredBorrowersCount()": FunctionFragment;
    "getRegisteredControllerFactories(uint256,uint256)": FunctionFragment;
    "getRegisteredControllerFactories()": FunctionFragment;
    "getRegisteredControllerFactoriesCount()": FunctionFragment;
    "getRegisteredControllers(uint256,uint256)": FunctionFragment;
    "getRegisteredControllers()": FunctionFragment;
    "getRegisteredControllersCount()": FunctionFragment;
    "getRegisteredMarkets()": FunctionFragment;
    "getRegisteredMarkets(uint256,uint256)": FunctionFragment;
    "getRegisteredMarketsCount()": FunctionFragment;
    "isRegisteredBorrower(address)": FunctionFragment;
    "isRegisteredController(address)": FunctionFragment;
    "isRegisteredControllerFactory(address)": FunctionFragment;
    "isRegisteredMarket(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownershipHandoverExpiresAt(address)": FunctionFragment;
    "registerBorrower(address)": FunctionFragment;
    "registerController(address)": FunctionFragment;
    "registerControllerFactory(address)": FunctionFragment;
    "registerMarket(address)": FunctionFragment;
    "removeBorrower(address)": FunctionFragment;
    "removeController(address)": FunctionFragment;
    "removeControllerFactory(address)": FunctionFragment;
    "removeMarket(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestOwnershipHandover()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateSphereXEngineOnRegisteredContracts(address[],address[],address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelOwnershipHandover"
      | "completeOwnershipHandover"
      | "getRegisteredBorrowers()"
      | "getRegisteredBorrowers(uint256,uint256)"
      | "getRegisteredBorrowersCount"
      | "getRegisteredControllerFactories(uint256,uint256)"
      | "getRegisteredControllerFactories()"
      | "getRegisteredControllerFactoriesCount"
      | "getRegisteredControllers(uint256,uint256)"
      | "getRegisteredControllers()"
      | "getRegisteredControllersCount"
      | "getRegisteredMarkets()"
      | "getRegisteredMarkets(uint256,uint256)"
      | "getRegisteredMarketsCount"
      | "isRegisteredBorrower"
      | "isRegisteredController"
      | "isRegisteredControllerFactory"
      | "isRegisteredMarket"
      | "owner"
      | "ownershipHandoverExpiresAt"
      | "registerBorrower"
      | "registerController"
      | "registerControllerFactory"
      | "registerMarket"
      | "removeBorrower"
      | "removeController"
      | "removeControllerFactory"
      | "removeMarket"
      | "renounceOwnership"
      | "requestOwnershipHandover"
      | "transferOwnership"
      | "updateSphereXEngineOnRegisteredContracts"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeOwnershipHandover",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredBorrowers()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredBorrowers(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredBorrowersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredControllerFactories(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredControllerFactories()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredControllerFactoriesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredControllers(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredControllers()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredControllersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredMarkets()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredMarkets(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredMarketsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredBorrower",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredControllerFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredMarket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownershipHandoverExpiresAt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBorrower",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerControllerFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMarket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBorrower",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeControllerFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMarket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSphereXEngineOnRegisteredContracts",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredBorrowers()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredBorrowers(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredBorrowersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredControllerFactories(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredControllerFactories()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredControllerFactoriesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredControllers(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredControllers()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredControllersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredMarkets()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredMarkets(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredMarketsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredControllerFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownershipHandoverExpiresAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerControllerFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeControllerFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSphereXEngineOnRegisteredContracts",
    data: BytesLike
  ): Result;

  events: {
    "BorrowerAdded(address)": EventFragment;
    "BorrowerRemoved(address)": EventFragment;
    "ControllerAdded(address,address)": EventFragment;
    "ControllerFactoryAdded(address)": EventFragment;
    "ControllerFactoryRemoved(address)": EventFragment;
    "ControllerRemoved(address)": EventFragment;
    "MarketAdded(address,address)": EventFragment;
    "MarketRemoved(address)": EventFragment;
    "OwnershipHandoverCanceled(address)": EventFragment;
    "OwnershipHandoverRequested(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BorrowerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerFactoryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerFactoryRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface BorrowerAddedEventObject {
  arg0: string;
}
export type BorrowerAddedEvent = TypedEvent<[string], BorrowerAddedEventObject>;

export type BorrowerAddedEventFilter = TypedEventFilter<BorrowerAddedEvent>;

export interface BorrowerRemovedEventObject {
  arg0: string;
}
export type BorrowerRemovedEvent = TypedEvent<
  [string],
  BorrowerRemovedEventObject
>;

export type BorrowerRemovedEventFilter = TypedEventFilter<BorrowerRemovedEvent>;

export interface ControllerAddedEventObject {
  arg0: string;
  arg1: string;
}
export type ControllerAddedEvent = TypedEvent<
  [string, string],
  ControllerAddedEventObject
>;

export type ControllerAddedEventFilter = TypedEventFilter<ControllerAddedEvent>;

export interface ControllerFactoryAddedEventObject {
  arg0: string;
}
export type ControllerFactoryAddedEvent = TypedEvent<
  [string],
  ControllerFactoryAddedEventObject
>;

export type ControllerFactoryAddedEventFilter =
  TypedEventFilter<ControllerFactoryAddedEvent>;

export interface ControllerFactoryRemovedEventObject {
  arg0: string;
}
export type ControllerFactoryRemovedEvent = TypedEvent<
  [string],
  ControllerFactoryRemovedEventObject
>;

export type ControllerFactoryRemovedEventFilter =
  TypedEventFilter<ControllerFactoryRemovedEvent>;

export interface ControllerRemovedEventObject {
  arg0: string;
}
export type ControllerRemovedEvent = TypedEvent<
  [string],
  ControllerRemovedEventObject
>;

export type ControllerRemovedEventFilter =
  TypedEventFilter<ControllerRemovedEvent>;

export interface MarketAddedEventObject {
  arg0: string;
  arg1: string;
}
export type MarketAddedEvent = TypedEvent<
  [string, string],
  MarketAddedEventObject
>;

export type MarketAddedEventFilter = TypedEventFilter<MarketAddedEvent>;

export interface MarketRemovedEventObject {
  arg0: string;
}
export type MarketRemovedEvent = TypedEvent<[string], MarketRemovedEventObject>;

export type MarketRemovedEventFilter = TypedEventFilter<MarketRemovedEvent>;

export interface OwnershipHandoverCanceledEventObject {
  arg0: string;
}
export type OwnershipHandoverCanceledEvent = TypedEvent<
  [string],
  OwnershipHandoverCanceledEventObject
>;

export type OwnershipHandoverCanceledEventFilter =
  TypedEventFilter<OwnershipHandoverCanceledEvent>;

export interface OwnershipHandoverRequestedEventObject {
  arg0: string;
}
export type OwnershipHandoverRequestedEvent = TypedEvent<
  [string],
  OwnershipHandoverRequestedEventObject
>;

export type OwnershipHandoverRequestedEventFilter =
  TypedEventFilter<OwnershipHandoverRequestedEvent>;

export interface OwnershipTransferredEventObject {
  arg0: string;
  arg1: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WildcatArchController extends BaseContract {
  contractName: "WildcatArchController";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WildcatArchControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "getRegisteredBorrowers()"(overrides?: CallOverrides): Promise<[string[]]>;

    "getRegisteredBorrowers(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { arr: string[] }>;

    getRegisteredBorrowersCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRegisteredControllerFactories(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { arr: string[] }>;

    "getRegisteredControllerFactories()"(
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRegisteredControllerFactoriesCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRegisteredControllers(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { arr: string[] }>;

    "getRegisteredControllers()"(
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRegisteredControllersCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRegisteredMarkets()"(overrides?: CallOverrides): Promise<[string[]]>;

    "getRegisteredMarkets(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { arr: string[] }>;

    getRegisteredMarketsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    isRegisteredBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRegisteredController(
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRegisteredControllerFactory(
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRegisteredMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string] & { result: string }>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    registerBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerControllerFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerMarket(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeControllerFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMarket(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSphereXEngineOnRegisteredContracts(
      controllerFactories: PromiseOrValue<string>[],
      controllers: PromiseOrValue<string>[],
      markets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancelOwnershipHandover(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeOwnershipHandover(
    pendingOwner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "getRegisteredBorrowers()"(overrides?: CallOverrides): Promise<string[]>;

  "getRegisteredBorrowers(uint256,uint256)"(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRegisteredBorrowersCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getRegisteredControllerFactories(uint256,uint256)"(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getRegisteredControllerFactories()"(
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRegisteredControllerFactoriesCount(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRegisteredControllers(uint256,uint256)"(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getRegisteredControllers()"(overrides?: CallOverrides): Promise<string[]>;

  getRegisteredControllersCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getRegisteredMarkets()"(overrides?: CallOverrides): Promise<string[]>;

  "getRegisteredMarkets(uint256,uint256)"(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRegisteredMarketsCount(overrides?: CallOverrides): Promise<BigNumber>;

  isRegisteredBorrower(
    borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRegisteredController(
    controller: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRegisteredControllerFactory(
    factory: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRegisteredMarket(
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownershipHandoverExpiresAt(
    pendingOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerBorrower(
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerController(
    controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerControllerFactory(
    factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerMarket(
    market: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeBorrower(
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeController(
    controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeControllerFactory(
    factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMarket(
    market: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestOwnershipHandover(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSphereXEngineOnRegisteredContracts(
    controllerFactories: PromiseOrValue<string>[],
    controllers: PromiseOrValue<string>[],
    markets: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "getRegisteredBorrowers()"(overrides?: CallOverrides): Promise<string[]>;

    "getRegisteredBorrowers(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRegisteredBorrowersCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getRegisteredControllerFactories(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getRegisteredControllerFactories()"(
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRegisteredControllerFactoriesCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRegisteredControllers(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getRegisteredControllers()"(overrides?: CallOverrides): Promise<string[]>;

    getRegisteredControllersCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRegisteredMarkets()"(overrides?: CallOverrides): Promise<string[]>;

    "getRegisteredMarkets(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRegisteredMarketsCount(overrides?: CallOverrides): Promise<BigNumber>;

    isRegisteredBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRegisteredController(
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRegisteredControllerFactory(
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRegisteredMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerController(
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerControllerFactory(
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeController(
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeControllerFactory(
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSphereXEngineOnRegisteredContracts(
      controllerFactories: PromiseOrValue<string>[],
      controllers: PromiseOrValue<string>[],
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BorrowerAdded(address)"(arg0?: null): BorrowerAddedEventFilter;
    BorrowerAdded(arg0?: null): BorrowerAddedEventFilter;

    "BorrowerRemoved(address)"(arg0?: null): BorrowerRemovedEventFilter;
    BorrowerRemoved(arg0?: null): BorrowerRemovedEventFilter;

    "ControllerAdded(address,address)"(
      arg0?: null,
      arg1?: null
    ): ControllerAddedEventFilter;
    ControllerAdded(arg0?: null, arg1?: null): ControllerAddedEventFilter;

    "ControllerFactoryAdded(address)"(
      arg0?: null
    ): ControllerFactoryAddedEventFilter;
    ControllerFactoryAdded(arg0?: null): ControllerFactoryAddedEventFilter;

    "ControllerFactoryRemoved(address)"(
      arg0?: null
    ): ControllerFactoryRemovedEventFilter;
    ControllerFactoryRemoved(arg0?: null): ControllerFactoryRemovedEventFilter;

    "ControllerRemoved(address)"(arg0?: null): ControllerRemovedEventFilter;
    ControllerRemoved(arg0?: null): ControllerRemovedEventFilter;

    "MarketAdded(address,address)"(
      arg0?: null,
      arg1?: null
    ): MarketAddedEventFilter;
    MarketAdded(arg0?: null, arg1?: null): MarketAddedEventFilter;

    "MarketRemoved(address)"(arg0?: null): MarketRemovedEventFilter;
    MarketRemoved(arg0?: null): MarketRemovedEventFilter;

    "OwnershipHandoverCanceled(address)"(
      arg0?: null
    ): OwnershipHandoverCanceledEventFilter;
    OwnershipHandoverCanceled(
      arg0?: null
    ): OwnershipHandoverCanceledEventFilter;

    "OwnershipHandoverRequested(address)"(
      arg0?: null
    ): OwnershipHandoverRequestedEventFilter;
    OwnershipHandoverRequested(
      arg0?: null
    ): OwnershipHandoverRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      arg0?: null,
      arg1?: null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      arg0?: null,
      arg1?: null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "getRegisteredBorrowers()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getRegisteredBorrowers(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredBorrowersCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getRegisteredControllerFactories(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRegisteredControllerFactories()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredControllerFactoriesCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRegisteredControllers(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRegisteredControllers()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRegisteredControllersCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRegisteredMarkets()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getRegisteredMarkets(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredMarketsCount(overrides?: CallOverrides): Promise<BigNumber>;

    isRegisteredBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredController(
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredControllerFactory(
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerControllerFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerMarket(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeControllerFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMarket(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSphereXEngineOnRegisteredContracts(
      controllerFactories: PromiseOrValue<string>[],
      controllers: PromiseOrValue<string>[],
      markets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "getRegisteredBorrowers()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRegisteredBorrowers(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredBorrowersCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRegisteredControllerFactories(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRegisteredControllerFactories()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredControllerFactoriesCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRegisteredControllers(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRegisteredControllers()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredControllersCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRegisteredMarkets()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRegisteredMarkets(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredMarketsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredController(
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredControllerFactory(
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerControllerFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerMarket(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeControllerFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMarket(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSphereXEngineOnRegisteredContracts(
      controllerFactories: PromiseOrValue<string>[],
      controllers: PromiseOrValue<string>[],
      markets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
