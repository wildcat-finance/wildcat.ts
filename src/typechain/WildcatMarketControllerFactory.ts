/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type MarketControllerParametersStruct = {
  archController: PromiseOrValue<string>;
  borrower: PromiseOrValue<string>;
  sentinel: PromiseOrValue<string>;
  marketInitCodeStorage: PromiseOrValue<string>;
  marketInitCodeHash: PromiseOrValue<BigNumberish>;
  minimumDelinquencyGracePeriod: PromiseOrValue<BigNumberish>;
  maximumDelinquencyGracePeriod: PromiseOrValue<BigNumberish>;
  minimumReserveRatioBips: PromiseOrValue<BigNumberish>;
  maximumReserveRatioBips: PromiseOrValue<BigNumberish>;
  minimumDelinquencyFeeBips: PromiseOrValue<BigNumberish>;
  maximumDelinquencyFeeBips: PromiseOrValue<BigNumberish>;
  minimumWithdrawalBatchDuration: PromiseOrValue<BigNumberish>;
  maximumWithdrawalBatchDuration: PromiseOrValue<BigNumberish>;
  minimumAnnualInterestBips: PromiseOrValue<BigNumberish>;
  maximumAnnualInterestBips: PromiseOrValue<BigNumberish>;
};

export type MarketControllerParametersStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number
] & {
  archController: string;
  borrower: string;
  sentinel: string;
  marketInitCodeStorage: string;
  marketInitCodeHash: BigNumber;
  minimumDelinquencyGracePeriod: number;
  maximumDelinquencyGracePeriod: number;
  minimumReserveRatioBips: number;
  maximumReserveRatioBips: number;
  minimumDelinquencyFeeBips: number;
  maximumDelinquencyFeeBips: number;
  minimumWithdrawalBatchDuration: number;
  maximumWithdrawalBatchDuration: number;
  minimumAnnualInterestBips: number;
  maximumAnnualInterestBips: number;
};

export type MarketParameterConstraintsStruct = {
  minimumDelinquencyGracePeriod: PromiseOrValue<BigNumberish>;
  maximumDelinquencyGracePeriod: PromiseOrValue<BigNumberish>;
  minimumReserveRatioBips: PromiseOrValue<BigNumberish>;
  maximumReserveRatioBips: PromiseOrValue<BigNumberish>;
  minimumDelinquencyFeeBips: PromiseOrValue<BigNumberish>;
  maximumDelinquencyFeeBips: PromiseOrValue<BigNumberish>;
  minimumWithdrawalBatchDuration: PromiseOrValue<BigNumberish>;
  maximumWithdrawalBatchDuration: PromiseOrValue<BigNumberish>;
  minimumAnnualInterestBips: PromiseOrValue<BigNumberish>;
  maximumAnnualInterestBips: PromiseOrValue<BigNumberish>;
};

export type MarketParameterConstraintsStructOutput = [
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number
] & {
  minimumDelinquencyGracePeriod: number;
  maximumDelinquencyGracePeriod: number;
  minimumReserveRatioBips: number;
  maximumReserveRatioBips: number;
  minimumDelinquencyFeeBips: number;
  maximumDelinquencyFeeBips: number;
  minimumWithdrawalBatchDuration: number;
  maximumWithdrawalBatchDuration: number;
  minimumAnnualInterestBips: number;
  maximumAnnualInterestBips: number;
};

export interface WildcatMarketControllerFactoryInterface
  extends utils.Interface {
  functions: {
    "archController()": FunctionFragment;
    "computeControllerAddress(address)": FunctionFragment;
    "controllerInitCodeHash()": FunctionFragment;
    "controllerInitCodeStorage()": FunctionFragment;
    "deployController()": FunctionFragment;
    "deployControllerAndMarket(string,string,address,uint128,uint16,uint16,uint32,uint16,uint32)": FunctionFragment;
    "getDeployedControllers(uint256,uint256)": FunctionFragment;
    "getDeployedControllers()": FunctionFragment;
    "getDeployedControllersCount()": FunctionFragment;
    "getMarketControllerParameters()": FunctionFragment;
    "getParameterConstraints()": FunctionFragment;
    "getProtocolFeeConfiguration()": FunctionFragment;
    "isDeployedController(address)": FunctionFragment;
    "marketInitCodeHash()": FunctionFragment;
    "marketInitCodeStorage()": FunctionFragment;
    "sentinel()": FunctionFragment;
    "setProtocolFeeConfiguration(address,address,uint80,uint16)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "archController"
      | "computeControllerAddress"
      | "controllerInitCodeHash"
      | "controllerInitCodeStorage"
      | "deployController"
      | "deployControllerAndMarket"
      | "getDeployedControllers(uint256,uint256)"
      | "getDeployedControllers()"
      | "getDeployedControllersCount"
      | "getMarketControllerParameters"
      | "getParameterConstraints"
      | "getProtocolFeeConfiguration"
      | "isDeployedController"
      | "marketInitCodeHash"
      | "marketInitCodeStorage"
      | "sentinel"
      | "setProtocolFeeConfiguration"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "archController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeControllerAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerInitCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllerInitCodeStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployControllerAndMarket",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedControllers(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedControllers()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedControllersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketControllerParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParameterConstraints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeeConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDeployedController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketInitCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketInitCodeStorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sentinel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeConfiguration",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "archController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerInitCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerInitCodeStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployControllerAndMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedControllers(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedControllers()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedControllersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketControllerParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParameterConstraints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeeConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDeployedController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketInitCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketInitCodeStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sentinel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeConfiguration",
    data: BytesLike
  ): Result;

  events: {
    "NewController(address,address)": EventFragment;
    "UpdateProtocolFeeConfiguration(address,uint16,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewController"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateProtocolFeeConfiguration"
  ): EventFragment;
}

export interface NewControllerEventObject {
  borrower: string;
  controller: string;
}
export type NewControllerEvent = TypedEvent<
  [string, string],
  NewControllerEventObject
>;

export type NewControllerEventFilter = TypedEventFilter<NewControllerEvent>;

export interface UpdateProtocolFeeConfigurationEventObject {
  feeRecipient: string;
  protocolFeeBips: number;
  originationFeeAsset: string;
  originationFeeAmount: BigNumber;
}
export type UpdateProtocolFeeConfigurationEvent = TypedEvent<
  [string, number, string, BigNumber],
  UpdateProtocolFeeConfigurationEventObject
>;

export type UpdateProtocolFeeConfigurationEventFilter =
  TypedEventFilter<UpdateProtocolFeeConfigurationEvent>;

export interface WildcatMarketControllerFactory extends BaseContract {
  contractName: "WildcatMarketControllerFactory";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WildcatMarketControllerFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    archController(overrides?: CallOverrides): Promise<[string]>;

    computeControllerAddress(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    controllerInitCodeHash(overrides?: CallOverrides): Promise<[BigNumber]>;

    controllerInitCodeStorage(overrides?: CallOverrides): Promise<[string]>;

    deployController(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployControllerAndMarket(
      namePrefix: PromiseOrValue<string>,
      symbolPrefix: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      maxTotalSupply: PromiseOrValue<BigNumberish>,
      annualInterestBips: PromiseOrValue<BigNumberish>,
      delinquencyFeeBips: PromiseOrValue<BigNumberish>,
      withdrawalBatchDuration: PromiseOrValue<BigNumberish>,
      reserveRatioBips: PromiseOrValue<BigNumberish>,
      delinquencyGracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "getDeployedControllers(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { arr: string[] }>;

    "getDeployedControllers()"(overrides?: CallOverrides): Promise<[string[]]>;

    getDeployedControllersCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarketControllerParameters(
      overrides?: CallOverrides
    ): Promise<
      [MarketControllerParametersStructOutput] & {
        parameters: MarketControllerParametersStructOutput;
      }
    >;

    getParameterConstraints(
      overrides?: CallOverrides
    ): Promise<
      [MarketParameterConstraintsStructOutput] & {
        constraints: MarketParameterConstraintsStructOutput;
      }
    >;

    getProtocolFeeConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number] & {
        feeRecipient: string;
        originationFeeAsset: string;
        originationFeeAmount: BigNumber;
        protocolFeeBips: number;
      }
    >;

    isDeployedController(
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marketInitCodeHash(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketInitCodeStorage(overrides?: CallOverrides): Promise<[string]>;

    sentinel(overrides?: CallOverrides): Promise<[string]>;

    setProtocolFeeConfiguration(
      feeRecipient: PromiseOrValue<string>,
      originationFeeAsset: PromiseOrValue<string>,
      originationFeeAmount: PromiseOrValue<BigNumberish>,
      protocolFeeBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  archController(overrides?: CallOverrides): Promise<string>;

  computeControllerAddress(
    borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  controllerInitCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

  controllerInitCodeStorage(overrides?: CallOverrides): Promise<string>;

  deployController(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployControllerAndMarket(
    namePrefix: PromiseOrValue<string>,
    symbolPrefix: PromiseOrValue<string>,
    asset: PromiseOrValue<string>,
    maxTotalSupply: PromiseOrValue<BigNumberish>,
    annualInterestBips: PromiseOrValue<BigNumberish>,
    delinquencyFeeBips: PromiseOrValue<BigNumberish>,
    withdrawalBatchDuration: PromiseOrValue<BigNumberish>,
    reserveRatioBips: PromiseOrValue<BigNumberish>,
    delinquencyGracePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "getDeployedControllers(uint256,uint256)"(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getDeployedControllers()"(overrides?: CallOverrides): Promise<string[]>;

  getDeployedControllersCount(overrides?: CallOverrides): Promise<BigNumber>;

  getMarketControllerParameters(
    overrides?: CallOverrides
  ): Promise<MarketControllerParametersStructOutput>;

  getParameterConstraints(
    overrides?: CallOverrides
  ): Promise<MarketParameterConstraintsStructOutput>;

  getProtocolFeeConfiguration(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, number] & {
      feeRecipient: string;
      originationFeeAsset: string;
      originationFeeAmount: BigNumber;
      protocolFeeBips: number;
    }
  >;

  isDeployedController(
    controller: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marketInitCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

  marketInitCodeStorage(overrides?: CallOverrides): Promise<string>;

  sentinel(overrides?: CallOverrides): Promise<string>;

  setProtocolFeeConfiguration(
    feeRecipient: PromiseOrValue<string>,
    originationFeeAsset: PromiseOrValue<string>,
    originationFeeAmount: PromiseOrValue<BigNumberish>,
    protocolFeeBips: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    archController(overrides?: CallOverrides): Promise<string>;

    computeControllerAddress(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    controllerInitCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    controllerInitCodeStorage(overrides?: CallOverrides): Promise<string>;

    deployController(overrides?: CallOverrides): Promise<string>;

    deployControllerAndMarket(
      namePrefix: PromiseOrValue<string>,
      symbolPrefix: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      maxTotalSupply: PromiseOrValue<BigNumberish>,
      annualInterestBips: PromiseOrValue<BigNumberish>,
      delinquencyFeeBips: PromiseOrValue<BigNumberish>,
      withdrawalBatchDuration: PromiseOrValue<BigNumberish>,
      reserveRatioBips: PromiseOrValue<BigNumberish>,
      delinquencyGracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { controller: string; market: string }>;

    "getDeployedControllers(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getDeployedControllers()"(overrides?: CallOverrides): Promise<string[]>;

    getDeployedControllersCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketControllerParameters(
      overrides?: CallOverrides
    ): Promise<MarketControllerParametersStructOutput>;

    getParameterConstraints(
      overrides?: CallOverrides
    ): Promise<MarketParameterConstraintsStructOutput>;

    getProtocolFeeConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number] & {
        feeRecipient: string;
        originationFeeAsset: string;
        originationFeeAmount: BigNumber;
        protocolFeeBips: number;
      }
    >;

    isDeployedController(
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketInitCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    marketInitCodeStorage(overrides?: CallOverrides): Promise<string>;

    sentinel(overrides?: CallOverrides): Promise<string>;

    setProtocolFeeConfiguration(
      feeRecipient: PromiseOrValue<string>,
      originationFeeAsset: PromiseOrValue<string>,
      originationFeeAmount: PromiseOrValue<BigNumberish>,
      protocolFeeBips: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewController(address,address)"(
      borrower?: null,
      controller?: null
    ): NewControllerEventFilter;
    NewController(borrower?: null, controller?: null): NewControllerEventFilter;

    "UpdateProtocolFeeConfiguration(address,uint16,address,uint256)"(
      feeRecipient?: null,
      protocolFeeBips?: null,
      originationFeeAsset?: null,
      originationFeeAmount?: null
    ): UpdateProtocolFeeConfigurationEventFilter;
    UpdateProtocolFeeConfiguration(
      feeRecipient?: null,
      protocolFeeBips?: null,
      originationFeeAsset?: null,
      originationFeeAmount?: null
    ): UpdateProtocolFeeConfigurationEventFilter;
  };

  estimateGas: {
    archController(overrides?: CallOverrides): Promise<BigNumber>;

    computeControllerAddress(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controllerInitCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    controllerInitCodeStorage(overrides?: CallOverrides): Promise<BigNumber>;

    deployController(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployControllerAndMarket(
      namePrefix: PromiseOrValue<string>,
      symbolPrefix: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      maxTotalSupply: PromiseOrValue<BigNumberish>,
      annualInterestBips: PromiseOrValue<BigNumberish>,
      delinquencyFeeBips: PromiseOrValue<BigNumberish>,
      withdrawalBatchDuration: PromiseOrValue<BigNumberish>,
      reserveRatioBips: PromiseOrValue<BigNumberish>,
      delinquencyGracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "getDeployedControllers(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeployedControllers()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDeployedControllersCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketControllerParameters(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParameterConstraints(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolFeeConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    isDeployedController(
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketInitCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    marketInitCodeStorage(overrides?: CallOverrides): Promise<BigNumber>;

    sentinel(overrides?: CallOverrides): Promise<BigNumber>;

    setProtocolFeeConfiguration(
      feeRecipient: PromiseOrValue<string>,
      originationFeeAsset: PromiseOrValue<string>,
      originationFeeAmount: PromiseOrValue<BigNumberish>,
      protocolFeeBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    archController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeControllerAddress(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controllerInitCodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controllerInitCodeStorage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployController(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployControllerAndMarket(
      namePrefix: PromiseOrValue<string>,
      symbolPrefix: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      maxTotalSupply: PromiseOrValue<BigNumberish>,
      annualInterestBips: PromiseOrValue<BigNumberish>,
      delinquencyFeeBips: PromiseOrValue<BigNumberish>,
      withdrawalBatchDuration: PromiseOrValue<BigNumberish>,
      reserveRatioBips: PromiseOrValue<BigNumberish>,
      delinquencyGracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "getDeployedControllers(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeployedControllers()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeployedControllersCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketControllerParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParameterConstraints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolFeeConfiguration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDeployedController(
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketInitCodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketInitCodeStorage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sentinel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setProtocolFeeConfiguration(
      feeRecipient: PromiseOrValue<string>,
      originationFeeAsset: PromiseOrValue<string>,
      originationFeeAmount: PromiseOrValue<BigNumberish>,
      protocolFeeBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
