/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type VaultStateStruct = {
  maxTotalSupply: PromiseOrValue<BigNumberish>;
  scaledTotalSupply: PromiseOrValue<BigNumberish>;
  isDelinquent: PromiseOrValue<boolean>;
  annualInterestBips: PromiseOrValue<BigNumberish>;
  liquidityCoverageRatio: PromiseOrValue<BigNumberish>;
  timeDelinquent: PromiseOrValue<BigNumberish>;
  scaleFactor: PromiseOrValue<BigNumberish>;
  lastInterestAccruedTimestamp: PromiseOrValue<BigNumberish>;
};

export type VaultStateStructOutput = [
  BigNumber,
  BigNumber,
  boolean,
  number,
  number,
  number,
  BigNumber,
  number
] & {
  maxTotalSupply: BigNumber;
  scaledTotalSupply: BigNumber;
  isDelinquent: boolean;
  annualInterestBips: number;
  liquidityCoverageRatio: number;
  timeDelinquent: number;
  scaleFactor: BigNumber;
  lastInterestAccruedTimestamp: number;
};

export interface WildcatVaultTokenInterface extends utils.Interface {
  functions: {
    "accruedProtocolFees()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "annualInterestBips()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "asset()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrow(uint256)": FunctionFragment;
    "borrowableAssets()": FunctionFragment;
    "borrower()": FunctionFragment;
    "closeVault()": FunctionFragment;
    "collectFees()": FunctionFragment;
    "controller()": FunctionFragment;
    "coverageLiquidity()": FunctionFragment;
    "currentState()": FunctionFragment;
    "decimals()": FunctionFragment;
    "delinquentDebt()": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "depositUpTo(uint256,address)": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "gracePeriod()": FunctionFragment;
    "interestFeeBips()": FunctionFragment;
    "lastAccruedProtocolFees()": FunctionFragment;
    "liquidityCoverageRatio()": FunctionFragment;
    "maxTotalSupply()": FunctionFragment;
    "maximumDeposit()": FunctionFragment;
    "name()": FunctionFragment;
    "outstandingDebt()": FunctionFragment;
    "penaltyFeeBips()": FunctionFragment;
    "previousState()": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "repayDelinquentDebt()": FunctionFragment;
    "repayOutstandingDebt()": FunctionFragment;
    "scaleFactor()": FunctionFragment;
    "scaledBalanceOf(address)": FunctionFragment;
    "setAnnualInterestBips(uint256)": FunctionFragment;
    "setLiquidityCoverageRatio(uint256)": FunctionFragment;
    "setMaxTotalSupply(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalDebt()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accruedProtocolFees"
      | "allowance"
      | "annualInterestBips"
      | "approve"
      | "asset"
      | "balanceOf"
      | "borrow"
      | "borrowableAssets"
      | "borrower"
      | "closeVault"
      | "collectFees"
      | "controller"
      | "coverageLiquidity"
      | "currentState"
      | "decimals"
      | "delinquentDebt"
      | "deposit"
      | "depositUpTo"
      | "feeRecipient"
      | "gracePeriod"
      | "interestFeeBips"
      | "lastAccruedProtocolFees"
      | "liquidityCoverageRatio"
      | "maxTotalSupply"
      | "maximumDeposit"
      | "name"
      | "outstandingDebt"
      | "penaltyFeeBips"
      | "previousState"
      | "repay"
      | "repayDelinquentDebt"
      | "repayOutstandingDebt"
      | "scaleFactor"
      | "scaledBalanceOf"
      | "setAnnualInterestBips"
      | "setLiquidityCoverageRatio"
      | "setMaxTotalSupply"
      | "symbol"
      | "totalAssets"
      | "totalDebt"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accruedProtocolFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "annualInterestBips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowableAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "borrower", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closeVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coverageLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delinquentDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUpTo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestFeeBips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastAccruedProtocolFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityCoverageRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maximumDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "outstandingDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "penaltyFeeBips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previousState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDelinquentDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayOutstandingDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scaleFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scaledBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAnnualInterestBips",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityCoverageRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalSupply",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "accruedProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "annualInterestBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowableAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coverageLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delinquentDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositUpTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestFeeBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastAccruedProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityCoverageRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "outstandingDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "penaltyFeeBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayDelinquentDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayOutstandingDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaleFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnnualInterestBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityCoverageRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Borrow(uint256)": EventFragment;
    "DebtRepaid(uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "FeesCollected(uint256)": EventFragment;
    "MaxSupplyUpdated(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VaultClosed(uint256)": EventFragment;
    "Withdrawal(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DebtRepaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxSupplyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface ApprovalEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BorrowEventObject {
  arg0: BigNumber;
}
export type BorrowEvent = TypedEvent<[BigNumber], BorrowEventObject>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface DebtRepaidEventObject {
  arg0: BigNumber;
}
export type DebtRepaidEvent = TypedEvent<[BigNumber], DebtRepaidEventObject>;

export type DebtRepaidEventFilter = TypedEventFilter<DebtRepaidEvent>;

export interface DepositEventObject {
  arg0: string;
  arg1: BigNumber;
  arg2: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface FeesCollectedEventObject {
  arg0: BigNumber;
}
export type FeesCollectedEvent = TypedEvent<
  [BigNumber],
  FeesCollectedEventObject
>;

export type FeesCollectedEventFilter = TypedEventFilter<FeesCollectedEvent>;

export interface MaxSupplyUpdatedEventObject {
  arg0: BigNumber;
}
export type MaxSupplyUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxSupplyUpdatedEventObject
>;

export type MaxSupplyUpdatedEventFilter =
  TypedEventFilter<MaxSupplyUpdatedEvent>;

export interface TransferEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface VaultClosedEventObject {
  arg0: BigNumber;
}
export type VaultClosedEvent = TypedEvent<[BigNumber], VaultClosedEventObject>;

export type VaultClosedEventFilter = TypedEventFilter<VaultClosedEvent>;

export interface WithdrawalEventObject {
  arg0: string;
  arg1: BigNumber;
  arg2: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface WildcatVaultToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WildcatVaultTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accruedProtocolFees(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _accruedProtocolFees: BigNumber }>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    annualInterestBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrowableAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrower(overrides?: CallOverrides): Promise<[string]>;

    closeVault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    coverageLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentState(overrides?: CallOverrides): Promise<[VaultStateStructOutput]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    delinquentDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositUpTo(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    gracePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    interestFeeBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastAccruedProtocolFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityCoverageRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    maximumDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    outstandingDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    penaltyFeeBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    previousState(overrides?: CallOverrides): Promise<[VaultStateStructOutput]>;

    repay(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayDelinquentDebt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayOutstandingDebt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scaleFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    scaledBalanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAnnualInterestBips(
      _annualInterestBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidityCoverageRatio(
      _liquidityCoverageRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxTotalSupply(
      _maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accruedProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  annualInterestBips(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrow(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrowableAssets(overrides?: CallOverrides): Promise<BigNumber>;

  borrower(overrides?: CallOverrides): Promise<string>;

  closeVault(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  coverageLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  currentState(overrides?: CallOverrides): Promise<VaultStateStructOutput>;

  decimals(overrides?: CallOverrides): Promise<number>;

  delinquentDebt(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositUpTo(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  interestFeeBips(overrides?: CallOverrides): Promise<BigNumber>;

  lastAccruedProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityCoverageRatio(overrides?: CallOverrides): Promise<BigNumber>;

  maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  maximumDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  outstandingDebt(overrides?: CallOverrides): Promise<BigNumber>;

  penaltyFeeBips(overrides?: CallOverrides): Promise<BigNumber>;

  previousState(overrides?: CallOverrides): Promise<VaultStateStructOutput>;

  repay(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayDelinquentDebt(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayOutstandingDebt(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

  scaledBalanceOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAnnualInterestBips(
    _annualInterestBips: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidityCoverageRatio(
    _liquidityCoverageRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxTotalSupply(
    _maxTotalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accruedProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    annualInterestBips(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowableAssets(overrides?: CallOverrides): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<string>;

    closeVault(overrides?: CallOverrides): Promise<void>;

    collectFees(overrides?: CallOverrides): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    coverageLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    currentState(overrides?: CallOverrides): Promise<VaultStateStructOutput>;

    decimals(overrides?: CallOverrides): Promise<number>;

    delinquentDebt(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositUpTo(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    interestFeeBips(overrides?: CallOverrides): Promise<BigNumber>;

    lastAccruedProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityCoverageRatio(overrides?: CallOverrides): Promise<BigNumber>;

    maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    maximumDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    outstandingDebt(overrides?: CallOverrides): Promise<BigNumber>;

    penaltyFeeBips(overrides?: CallOverrides): Promise<BigNumber>;

    previousState(overrides?: CallOverrides): Promise<VaultStateStructOutput>;

    repay(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayDelinquentDebt(overrides?: CallOverrides): Promise<void>;

    repayOutstandingDebt(overrides?: CallOverrides): Promise<void>;

    scaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

    scaledBalanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAnnualInterestBips(
      _annualInterestBips: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityCoverageRatio(
      _liquidityCoverageRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTotalSupply(
      _maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): ApprovalEventFilter;
    Approval(arg0?: null, arg1?: null, arg2?: null): ApprovalEventFilter;

    "Borrow(uint256)"(arg0?: null): BorrowEventFilter;
    Borrow(arg0?: null): BorrowEventFilter;

    "DebtRepaid(uint256)"(arg0?: null): DebtRepaidEventFilter;
    DebtRepaid(arg0?: null): DebtRepaidEventFilter;

    "Deposit(address,uint256,uint256)"(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): DepositEventFilter;
    Deposit(arg0?: null, arg1?: null, arg2?: null): DepositEventFilter;

    "FeesCollected(uint256)"(arg0?: null): FeesCollectedEventFilter;
    FeesCollected(arg0?: null): FeesCollectedEventFilter;

    "MaxSupplyUpdated(uint256)"(arg0?: null): MaxSupplyUpdatedEventFilter;
    MaxSupplyUpdated(arg0?: null): MaxSupplyUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): TransferEventFilter;
    Transfer(arg0?: null, arg1?: null, arg2?: null): TransferEventFilter;

    "VaultClosed(uint256)"(arg0?: null): VaultClosedEventFilter;
    VaultClosed(arg0?: null): VaultClosedEventFilter;

    "Withdrawal(address,uint256,uint256)"(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): WithdrawalEventFilter;
    Withdrawal(arg0?: null, arg1?: null, arg2?: null): WithdrawalEventFilter;
  };

  estimateGas: {
    accruedProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    annualInterestBips(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrowableAssets(overrides?: CallOverrides): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<BigNumber>;

    closeVault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    coverageLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    currentState(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    delinquentDebt(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositUpTo(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    interestFeeBips(overrides?: CallOverrides): Promise<BigNumber>;

    lastAccruedProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityCoverageRatio(overrides?: CallOverrides): Promise<BigNumber>;

    maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    maximumDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    outstandingDebt(overrides?: CallOverrides): Promise<BigNumber>;

    penaltyFeeBips(overrides?: CallOverrides): Promise<BigNumber>;

    previousState(overrides?: CallOverrides): Promise<BigNumber>;

    repay(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayDelinquentDebt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayOutstandingDebt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

    scaledBalanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAnnualInterestBips(
      _annualInterestBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidityCoverageRatio(
      _liquidityCoverageRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxTotalSupply(
      _maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accruedProtocolFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    annualInterestBips(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrowableAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeVault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coverageLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delinquentDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositUpTo(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestFeeBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastAccruedProtocolFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityCoverageRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maximumDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outstandingDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penaltyFeeBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previousState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repay(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayDelinquentDebt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayOutstandingDebt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scaleFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scaledBalanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAnnualInterestBips(
      _annualInterestBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityCoverageRatio(
      _liquidityCoverageRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTotalSupply(
      _maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
