/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MockArchControllerOwnerInterface extends utils.Interface {
  functions: {
    "authorizeAccount(address)": FunctionFragment;
    "authorizedAccounts(address)": FunctionFragment;
    "registerBorrower(address)": FunctionFragment;
    "registerBorrowers(address[])": FunctionFragment;
    "returnOwnership()": FunctionFragment;
    "setProtocolFeeConfiguration(address,address,address,uint80,uint16)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authorizeAccount"
      | "authorizedAccounts"
      | "registerBorrower"
      | "registerBorrowers"
      | "returnOwnership"
      | "setProtocolFeeConfiguration"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorizeAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBorrower",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBorrowers",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "returnOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeConfiguration",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBorrowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeConfiguration",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockArchControllerOwner extends BaseContract {
  contractName: "MockArchControllerOwner";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockArchControllerOwnerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authorizeAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizedAccounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerBorrowers(
      borrowers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    returnOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeConfiguration(
      factory: PromiseOrValue<string>,
      feeRecipient: PromiseOrValue<string>,
      originationFeeAsset: PromiseOrValue<string>,
      originationFeeAmount: PromiseOrValue<BigNumberish>,
      protocolFeeBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  authorizeAccount(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizedAccounts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerBorrower(
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerBorrowers(
    borrowers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  returnOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeConfiguration(
    factory: PromiseOrValue<string>,
    feeRecipient: PromiseOrValue<string>,
    originationFeeAsset: PromiseOrValue<string>,
    originationFeeAmount: PromiseOrValue<BigNumberish>,
    protocolFeeBips: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authorizeAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedAccounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerBorrowers(
      borrowers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    returnOwnership(overrides?: CallOverrides): Promise<void>;

    setProtocolFeeConfiguration(
      factory: PromiseOrValue<string>,
      feeRecipient: PromiseOrValue<string>,
      originationFeeAsset: PromiseOrValue<string>,
      originationFeeAmount: PromiseOrValue<BigNumberish>,
      protocolFeeBips: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    authorizeAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizedAccounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerBorrowers(
      borrowers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    returnOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFeeConfiguration(
      factory: PromiseOrValue<string>,
      feeRecipient: PromiseOrValue<string>,
      originationFeeAsset: PromiseOrValue<string>,
      originationFeeAmount: PromiseOrValue<BigNumberish>,
      protocolFeeBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorizeAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizedAccounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerBorrowers(
      borrowers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    returnOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeConfiguration(
      factory: PromiseOrValue<string>,
      feeRecipient: PromiseOrValue<string>,
      originationFeeAsset: PromiseOrValue<string>,
      originationFeeAmount: PromiseOrValue<BigNumberish>,
      protocolFeeBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
