/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type AccountVaultInfoStruct = {
  scaledBalance: PromiseOrValue<BigNumberish>;
  normalizedBalance: PromiseOrValue<BigNumberish>;
  underlyingBalance: PromiseOrValue<BigNumberish>;
  underlyingApproval: PromiseOrValue<BigNumberish>;
};

export type AccountVaultInfoStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  scaledBalance: BigNumber;
  normalizedBalance: BigNumber;
  underlyingBalance: BigNumber;
  underlyingApproval: BigNumber;
};

export type ControlStatusStruct = {
  temporaryLiquidityCoverage: PromiseOrValue<boolean>;
  originalLiquidityCoverageRatio: PromiseOrValue<BigNumberish>;
  temporaryLiquidityCoverageExpiry: PromiseOrValue<BigNumberish>;
};

export type ControlStatusStructOutput = [boolean, BigNumber, BigNumber] & {
  temporaryLiquidityCoverage: boolean;
  originalLiquidityCoverageRatio: BigNumber;
  temporaryLiquidityCoverageExpiry: BigNumber;
};

export type TokenMetadataStruct = {
  token: PromiseOrValue<string>;
  name: PromiseOrValue<string>;
  symbol: PromiseOrValue<string>;
  decimals: PromiseOrValue<BigNumberish>;
  isMock: PromiseOrValue<boolean>;
};

export type TokenMetadataStructOutput = [
  string,
  string,
  string,
  BigNumber,
  boolean
] & {
  token: string;
  name: string;
  symbol: string;
  decimals: BigNumber;
  isMock: boolean;
};

export type VaultDataStruct = {
  vaultToken: TokenMetadataStruct;
  underlyingToken: TokenMetadataStruct;
  borrower: PromiseOrValue<string>;
  controller: PromiseOrValue<string>;
  feeRecipient: PromiseOrValue<string>;
  interestFeeBips: PromiseOrValue<BigNumberish>;
  penaltyFeeBips: PromiseOrValue<BigNumberish>;
  gracePeriod: PromiseOrValue<BigNumberish>;
  annualInterestBips: PromiseOrValue<BigNumberish>;
  liquidityCoverageRatio: PromiseOrValue<BigNumberish>;
  temporaryLiquidityCoverage: PromiseOrValue<boolean>;
  originalLiquidityCoverageRatio: PromiseOrValue<BigNumberish>;
  temporaryLiquidityCoverageExpiry: PromiseOrValue<BigNumberish>;
  borrowableAssets: PromiseOrValue<BigNumberish>;
  maxTotalSupply: PromiseOrValue<BigNumberish>;
  scaledTotalSupply: PromiseOrValue<BigNumberish>;
  totalSupply: PromiseOrValue<BigNumberish>;
  totalAssets: PromiseOrValue<BigNumberish>;
  coverageLiquidity: PromiseOrValue<BigNumberish>;
  scaleFactor: PromiseOrValue<BigNumberish>;
  lastAccruedProtocolFees: PromiseOrValue<BigNumberish>;
  isDelinquent: PromiseOrValue<boolean>;
  timeDelinquent: PromiseOrValue<BigNumberish>;
  lastInterestAccruedTimestamp: PromiseOrValue<BigNumberish>;
};

export type VaultDataStructOutput = [
  TokenMetadataStructOutput,
  TokenMetadataStructOutput,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  BigNumber
] & {
  vaultToken: TokenMetadataStructOutput;
  underlyingToken: TokenMetadataStructOutput;
  borrower: string;
  controller: string;
  feeRecipient: string;
  interestFeeBips: BigNumber;
  penaltyFeeBips: BigNumber;
  gracePeriod: BigNumber;
  annualInterestBips: BigNumber;
  liquidityCoverageRatio: BigNumber;
  temporaryLiquidityCoverage: boolean;
  originalLiquidityCoverageRatio: BigNumber;
  temporaryLiquidityCoverageExpiry: BigNumber;
  borrowableAssets: BigNumber;
  maxTotalSupply: BigNumber;
  scaledTotalSupply: BigNumber;
  totalSupply: BigNumber;
  totalAssets: BigNumber;
  coverageLiquidity: BigNumber;
  scaleFactor: BigNumber;
  lastAccruedProtocolFees: BigNumber;
  isDelinquent: boolean;
  timeDelinquent: BigNumber;
  lastInterestAccruedTimestamp: BigNumber;
};

export interface VaultLensInterface extends utils.Interface {
  functions: {
    "getAccountVaultInfo(address,address)": FunctionFragment;
    "getControlStatus(address)": FunctionFragment;
    "getTokenInfo(address)": FunctionFragment;
    "getVaultData(address)": FunctionFragment;
    "getVaultsMetadata(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAccountVaultInfo"
      | "getControlStatus"
      | "getTokenInfo"
      | "getVaultData"
      | "getVaultsMetadata"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountVaultInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getControlStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultsMetadata",
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountVaultInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getControlStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultsMetadata",
    data: BytesLike
  ): Result;

  events: {};
}

export interface VaultLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultLensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountVaultInfo(
      vault: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [AccountVaultInfoStructOutput] & { info: AccountVaultInfoStructOutput }
    >;

    getControlStatus(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ControlStatusStructOutput] & { status: ControlStatusStructOutput }
    >;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [TokenMetadataStructOutput] & { info: TokenMetadataStructOutput }
    >;

    getVaultData(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[VaultDataStructOutput] & { data: VaultDataStructOutput }>;

    getVaultsMetadata(
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[VaultDataStructOutput[]] & { data: VaultDataStructOutput[] }>;
  };

  getAccountVaultInfo(
    vault: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AccountVaultInfoStructOutput>;

  getControlStatus(
    vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ControlStatusStructOutput>;

  getTokenInfo(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<TokenMetadataStructOutput>;

  getVaultData(
    vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<VaultDataStructOutput>;

  getVaultsMetadata(
    vaults: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<VaultDataStructOutput[]>;

  callStatic: {
    getAccountVaultInfo(
      vault: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AccountVaultInfoStructOutput>;

    getControlStatus(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ControlStatusStructOutput>;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<TokenMetadataStructOutput>;

    getVaultData(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<VaultDataStructOutput>;

    getVaultsMetadata(
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<VaultDataStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    getAccountVaultInfo(
      vault: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getControlStatus(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultData(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultsMetadata(
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountVaultInfo(
      vault: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getControlStatus(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultData(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultsMetadata(
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
