/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type AccountVaultInfoStruct = {
  scaledBalance: PromiseOrValue<BigNumberish>;
  normalizedBalance: PromiseOrValue<BigNumberish>;
  underlyingBalance: PromiseOrValue<BigNumberish>;
  underlyingApproval: PromiseOrValue<BigNumberish>;
};

export type AccountVaultInfoStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  scaledBalance: BigNumber;
  normalizedBalance: BigNumber;
  underlyingBalance: BigNumber;
  underlyingApproval: BigNumber;
};

export type TokenMetadataStruct = {
  token: PromiseOrValue<string>;
  name: PromiseOrValue<string>;
  symbol: PromiseOrValue<string>;
  decimals: PromiseOrValue<BigNumberish>;
  isMock: PromiseOrValue<boolean>;
};

export type TokenMetadataStructOutput = [
  string,
  string,
  string,
  BigNumber,
  boolean
] & {
  token: string;
  name: string;
  symbol: string;
  decimals: BigNumber;
  isMock: boolean;
};

export type VaultDataStruct = {
  vaultToken: TokenMetadataStruct;
  underlyingToken: TokenMetadataStruct;
  borrower: PromiseOrValue<string>;
  controller: PromiseOrValue<string>;
  feeRecipient: PromiseOrValue<string>;
  interestFeeBips: PromiseOrValue<BigNumberish>;
  penaltyFeeBips: PromiseOrValue<BigNumberish>;
  gracePeriod: PromiseOrValue<BigNumberish>;
  liquidityCoverageRatio: PromiseOrValue<BigNumberish>;
  temporaryLiquidityCoverage: PromiseOrValue<boolean>;
  originalLiquidityCoverageRatio: PromiseOrValue<BigNumberish>;
  temporaryLiquidityCoverageExpiry: PromiseOrValue<BigNumberish>;
  annualInterestBips: PromiseOrValue<BigNumberish>;
  borrowableAssets: PromiseOrValue<BigNumberish>;
  totalSupply: PromiseOrValue<BigNumberish>;
  maxTotalSupply: PromiseOrValue<BigNumberish>;
  scaledTotalSupply: PromiseOrValue<BigNumberish>;
  totalAssets: PromiseOrValue<BigNumberish>;
  coverageLiquidity: PromiseOrValue<BigNumberish>;
  scaleFactor: PromiseOrValue<BigNumberish>;
  lastAccruedProtocolFees: PromiseOrValue<BigNumberish>;
  isDelinquent: PromiseOrValue<boolean>;
  timeDelinquent: PromiseOrValue<BigNumberish>;
  lastInterestAccruedTimestamp: PromiseOrValue<BigNumberish>;
};

export type VaultDataStructOutput = [
  TokenMetadataStructOutput,
  TokenMetadataStructOutput,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  BigNumber
] & {
  vaultToken: TokenMetadataStructOutput;
  underlyingToken: TokenMetadataStructOutput;
  borrower: string;
  controller: string;
  feeRecipient: string;
  interestFeeBips: BigNumber;
  penaltyFeeBips: BigNumber;
  gracePeriod: BigNumber;
  liquidityCoverageRatio: BigNumber;
  temporaryLiquidityCoverage: boolean;
  originalLiquidityCoverageRatio: BigNumber;
  temporaryLiquidityCoverageExpiry: BigNumber;
  annualInterestBips: BigNumber;
  borrowableAssets: BigNumber;
  totalSupply: BigNumber;
  maxTotalSupply: BigNumber;
  scaledTotalSupply: BigNumber;
  totalAssets: BigNumber;
  coverageLiquidity: BigNumber;
  scaleFactor: BigNumber;
  lastAccruedProtocolFees: BigNumber;
  isDelinquent: boolean;
  timeDelinquent: BigNumber;
  lastInterestAccruedTimestamp: BigNumber;
};

export type VaultDataWithAccountStruct = {
  vault: VaultDataStruct;
  account: AccountVaultInfoStruct;
};

export type VaultDataWithAccountStructOutput = [
  VaultDataStructOutput,
  AccountVaultInfoStructOutput
] & { vault: VaultDataStructOutput; account: AccountVaultInfoStructOutput };

export type ControlStatusStruct = {
  temporaryLiquidityCoverage: PromiseOrValue<boolean>;
  originalLiquidityCoverageRatio: PromiseOrValue<BigNumberish>;
  temporaryLiquidityCoverageExpiry: PromiseOrValue<BigNumberish>;
};

export type ControlStatusStructOutput = [boolean, BigNumber, BigNumber] & {
  temporaryLiquidityCoverage: boolean;
  originalLiquidityCoverageRatio: BigNumber;
  temporaryLiquidityCoverageExpiry: BigNumber;
};

export interface VaultLensInterface extends utils.Interface {
  functions: {
    "factory()": FunctionFragment;
    "getAccountVaultInfo(address,address)": FunctionFragment;
    "getAccountVaultsInfo(address,address[])": FunctionFragment;
    "getAllVaultsData()": FunctionFragment;
    "getAllVaultsDataWithAccount(address)": FunctionFragment;
    "getControlStatus(address)": FunctionFragment;
    "getPaginatedVaultsData(uint256,uint256)": FunctionFragment;
    "getPaginatedVaultsDataWithAccount(address,uint256,uint256)": FunctionFragment;
    "getTokenInfo(address)": FunctionFragment;
    "getTokensInfo(address[])": FunctionFragment;
    "getVaultData(address)": FunctionFragment;
    "getVaultDataWithAccount(address,address)": FunctionFragment;
    "getVaultsCount()": FunctionFragment;
    "getVaultsData(address[])": FunctionFragment;
    "getVaultsDataWithAccount(address,address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "factory"
      | "getAccountVaultInfo"
      | "getAccountVaultsInfo"
      | "getAllVaultsData"
      | "getAllVaultsDataWithAccount"
      | "getControlStatus"
      | "getPaginatedVaultsData"
      | "getPaginatedVaultsDataWithAccount"
      | "getTokenInfo"
      | "getTokensInfo"
      | "getVaultData"
      | "getVaultDataWithAccount"
      | "getVaultsCount"
      | "getVaultsData"
      | "getVaultsDataWithAccount"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccountVaultInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountVaultsInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllVaultsData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllVaultsDataWithAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getControlStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedVaultsData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedVaultsDataWithAccount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensInfo",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultDataWithAccount",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultsData",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultsDataWithAccount",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountVaultInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountVaultsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllVaultsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllVaultsDataWithAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getControlStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedVaultsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedVaultsDataWithAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultDataWithAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultsDataWithAccount",
    data: BytesLike
  ): Result;

  events: {};
}

export interface VaultLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultLensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    factory(overrides?: CallOverrides): Promise<[string]>;

    getAccountVaultInfo(
      vault: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [AccountVaultInfoStructOutput] & { info: AccountVaultInfoStructOutput }
    >;

    getAccountVaultsInfo(
      account: PromiseOrValue<string>,
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [AccountVaultInfoStructOutput[]] & {
        info: AccountVaultInfoStructOutput[];
      }
    >;

    getAllVaultsData(
      overrides?: CallOverrides
    ): Promise<[VaultDataStructOutput[]] & { data: VaultDataStructOutput[] }>;

    getAllVaultsDataWithAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [VaultDataWithAccountStructOutput[]] & {
        data: VaultDataWithAccountStructOutput[];
      }
    >;

    getControlStatus(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ControlStatusStructOutput] & { status: ControlStatusStructOutput }
    >;

    getPaginatedVaultsData(
      start: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[VaultDataStructOutput[]] & { data: VaultDataStructOutput[] }>;

    getPaginatedVaultsDataWithAccount(
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [VaultDataWithAccountStructOutput[]] & {
        data: VaultDataWithAccountStructOutput[];
      }
    >;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [TokenMetadataStructOutput] & { info: TokenMetadataStructOutput }
    >;

    getTokensInfo(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [TokenMetadataStructOutput[]] & { info: TokenMetadataStructOutput[] }
    >;

    getVaultData(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[VaultDataStructOutput] & { data: VaultDataStructOutput }>;

    getVaultDataWithAccount(
      account: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [VaultDataWithAccountStructOutput] & {
        data: VaultDataWithAccountStructOutput;
      }
    >;

    getVaultsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVaultsData(
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[VaultDataStructOutput[]] & { data: VaultDataStructOutput[] }>;

    getVaultsDataWithAccount(
      account: PromiseOrValue<string>,
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [VaultDataWithAccountStructOutput[]] & {
        data: VaultDataWithAccountStructOutput[];
      }
    >;
  };

  factory(overrides?: CallOverrides): Promise<string>;

  getAccountVaultInfo(
    vault: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AccountVaultInfoStructOutput>;

  getAccountVaultsInfo(
    account: PromiseOrValue<string>,
    vaults: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<AccountVaultInfoStructOutput[]>;

  getAllVaultsData(overrides?: CallOverrides): Promise<VaultDataStructOutput[]>;

  getAllVaultsDataWithAccount(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<VaultDataWithAccountStructOutput[]>;

  getControlStatus(
    vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ControlStatusStructOutput>;

  getPaginatedVaultsData(
    start: PromiseOrValue<BigNumberish>,
    length: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<VaultDataStructOutput[]>;

  getPaginatedVaultsDataWithAccount(
    account: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    length: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<VaultDataWithAccountStructOutput[]>;

  getTokenInfo(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<TokenMetadataStructOutput>;

  getTokensInfo(
    tokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<TokenMetadataStructOutput[]>;

  getVaultData(
    vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<VaultDataStructOutput>;

  getVaultDataWithAccount(
    account: PromiseOrValue<string>,
    vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<VaultDataWithAccountStructOutput>;

  getVaultsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultsData(
    vaults: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<VaultDataStructOutput[]>;

  getVaultsDataWithAccount(
    account: PromiseOrValue<string>,
    vaults: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<VaultDataWithAccountStructOutput[]>;

  callStatic: {
    factory(overrides?: CallOverrides): Promise<string>;

    getAccountVaultInfo(
      vault: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AccountVaultInfoStructOutput>;

    getAccountVaultsInfo(
      account: PromiseOrValue<string>,
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<AccountVaultInfoStructOutput[]>;

    getAllVaultsData(
      overrides?: CallOverrides
    ): Promise<VaultDataStructOutput[]>;

    getAllVaultsDataWithAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<VaultDataWithAccountStructOutput[]>;

    getControlStatus(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ControlStatusStructOutput>;

    getPaginatedVaultsData(
      start: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<VaultDataStructOutput[]>;

    getPaginatedVaultsDataWithAccount(
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<VaultDataWithAccountStructOutput[]>;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<TokenMetadataStructOutput>;

    getTokensInfo(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<TokenMetadataStructOutput[]>;

    getVaultData(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<VaultDataStructOutput>;

    getVaultDataWithAccount(
      account: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<VaultDataWithAccountStructOutput>;

    getVaultsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultsData(
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<VaultDataStructOutput[]>;

    getVaultsDataWithAccount(
      account: PromiseOrValue<string>,
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<VaultDataWithAccountStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountVaultInfo(
      vault: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountVaultsInfo(
      account: PromiseOrValue<string>,
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllVaultsData(overrides?: CallOverrides): Promise<BigNumber>;

    getAllVaultsDataWithAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getControlStatus(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaginatedVaultsData(
      start: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaginatedVaultsDataWithAccount(
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensInfo(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultData(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultDataWithAccount(
      account: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultsData(
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultsDataWithAccount(
      account: PromiseOrValue<string>,
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountVaultInfo(
      vault: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountVaultsInfo(
      account: PromiseOrValue<string>,
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllVaultsData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllVaultsDataWithAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getControlStatus(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaginatedVaultsData(
      start: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaginatedVaultsDataWithAccount(
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensInfo(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultData(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultDataWithAccount(
      account: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultsData(
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultsDataWithAccount(
      account: PromiseOrValue<string>,
      vaults: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
