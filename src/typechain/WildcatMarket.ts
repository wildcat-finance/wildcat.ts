/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type MarketStateStruct = {
  isClosed: PromiseOrValue<boolean>;
  maxTotalSupply: PromiseOrValue<BigNumberish>;
  accruedProtocolFees: PromiseOrValue<BigNumberish>;
  normalizedUnclaimedWithdrawals: PromiseOrValue<BigNumberish>;
  scaledTotalSupply: PromiseOrValue<BigNumberish>;
  scaledPendingWithdrawals: PromiseOrValue<BigNumberish>;
  pendingWithdrawalExpiry: PromiseOrValue<BigNumberish>;
  isDelinquent: PromiseOrValue<boolean>;
  timeDelinquent: PromiseOrValue<BigNumberish>;
  annualInterestBips: PromiseOrValue<BigNumberish>;
  reserveRatioBips: PromiseOrValue<BigNumberish>;
  scaleFactor: PromiseOrValue<BigNumberish>;
  lastInterestAccruedTimestamp: PromiseOrValue<BigNumberish>;
};

export type MarketStateStructOutput = [
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  boolean,
  number,
  number,
  number,
  BigNumber,
  number
] & {
  isClosed: boolean;
  maxTotalSupply: BigNumber;
  accruedProtocolFees: BigNumber;
  normalizedUnclaimedWithdrawals: BigNumber;
  scaledTotalSupply: BigNumber;
  scaledPendingWithdrawals: BigNumber;
  pendingWithdrawalExpiry: number;
  isDelinquent: boolean;
  timeDelinquent: number;
  annualInterestBips: number;
  reserveRatioBips: number;
  scaleFactor: BigNumber;
  lastInterestAccruedTimestamp: number;
};

export type AccountWithdrawalStatusStruct = {
  scaledAmount: PromiseOrValue<BigNumberish>;
  normalizedAmountWithdrawn: PromiseOrValue<BigNumberish>;
};

export type AccountWithdrawalStatusStructOutput = [BigNumber, BigNumber] & {
  scaledAmount: BigNumber;
  normalizedAmountWithdrawn: BigNumber;
};

export type WithdrawalBatchStruct = {
  scaledTotalAmount: PromiseOrValue<BigNumberish>;
  scaledAmountBurned: PromiseOrValue<BigNumberish>;
  normalizedAmountPaid: PromiseOrValue<BigNumberish>;
};

export type WithdrawalBatchStructOutput = [BigNumber, BigNumber, BigNumber] & {
  scaledTotalAmount: BigNumber;
  scaledAmountBurned: BigNumber;
  normalizedAmountPaid: BigNumber;
};

export interface WildcatMarketInterface extends utils.Interface {
  functions: {
    "accruedProtocolFees()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "annualInterestBips()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "asset()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrow(uint256)": FunctionFragment;
    "borrowableAssets()": FunctionFragment;
    "borrower()": FunctionFragment;
    "closeMarket()": FunctionFragment;
    "collectFees()": FunctionFragment;
    "controller()": FunctionFragment;
    "coverageLiquidity()": FunctionFragment;
    "currentState()": FunctionFragment;
    "decimals()": FunctionFragment;
    "delinquencyFeeBips()": FunctionFragment;
    "delinquencyGracePeriod()": FunctionFragment;
    "delinquentDebt()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositUpTo(uint256)": FunctionFragment;
    "effectiveBorrowerAPR()": FunctionFragment;
    "effectiveLenderAPR()": FunctionFragment;
    "executeWithdrawal(address,uint32)": FunctionFragment;
    "executeWithdrawals(address[],uint32[])": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "getAccountRole(address)": FunctionFragment;
    "getAccountWithdrawalStatus(address,uint32)": FunctionFragment;
    "getAvailableWithdrawalAmount(address,uint32)": FunctionFragment;
    "getUnpaidBatchExpiries()": FunctionFragment;
    "getWithdrawalBatch(uint32)": FunctionFragment;
    "maxTotalSupply()": FunctionFragment;
    "maximumDeposit()": FunctionFragment;
    "name()": FunctionFragment;
    "nukeFromOrbit(address)": FunctionFragment;
    "outstandingDebt()": FunctionFragment;
    "previousState()": FunctionFragment;
    "protocolFeeBips()": FunctionFragment;
    "queueWithdrawal(uint256)": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "repayAndProcessUnpaidWithdrawalBatches(uint256,uint256)": FunctionFragment;
    "repayDelinquentDebt()": FunctionFragment;
    "repayOutstandingDebt()": FunctionFragment;
    "reserveRatioBips()": FunctionFragment;
    "scaleFactor()": FunctionFragment;
    "scaledBalanceOf(address)": FunctionFragment;
    "scaledTotalSupply()": FunctionFragment;
    "sentinel()": FunctionFragment;
    "setAnnualInterestBips(uint16)": FunctionFragment;
    "setMaxTotalSupply(uint256)": FunctionFragment;
    "setReserveRatioBips(uint16)": FunctionFragment;
    "stunningReversal(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalDebts()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateAccountAuthorizations(address[],bool)": FunctionFragment;
    "updateState()": FunctionFragment;
    "version()": FunctionFragment;
    "withdrawableProtocolFees()": FunctionFragment;
    "withdrawalBatchDuration()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accruedProtocolFees"
      | "allowance"
      | "annualInterestBips"
      | "approve"
      | "asset"
      | "balanceOf"
      | "borrow"
      | "borrowableAssets"
      | "borrower"
      | "closeMarket"
      | "collectFees"
      | "controller"
      | "coverageLiquidity"
      | "currentState"
      | "decimals"
      | "delinquencyFeeBips"
      | "delinquencyGracePeriod"
      | "delinquentDebt"
      | "deposit"
      | "depositUpTo"
      | "effectiveBorrowerAPR"
      | "effectiveLenderAPR"
      | "executeWithdrawal"
      | "executeWithdrawals"
      | "feeRecipient"
      | "getAccountRole"
      | "getAccountWithdrawalStatus"
      | "getAvailableWithdrawalAmount"
      | "getUnpaidBatchExpiries"
      | "getWithdrawalBatch"
      | "maxTotalSupply"
      | "maximumDeposit"
      | "name"
      | "nukeFromOrbit"
      | "outstandingDebt"
      | "previousState"
      | "protocolFeeBips"
      | "queueWithdrawal"
      | "repay"
      | "repayAndProcessUnpaidWithdrawalBatches"
      | "repayDelinquentDebt"
      | "repayOutstandingDebt"
      | "reserveRatioBips"
      | "scaleFactor"
      | "scaledBalanceOf"
      | "scaledTotalSupply"
      | "sentinel"
      | "setAnnualInterestBips"
      | "setMaxTotalSupply"
      | "setReserveRatioBips"
      | "stunningReversal"
      | "symbol"
      | "totalAssets"
      | "totalDebts"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "updateAccountAuthorizations"
      | "updateState"
      | "version"
      | "withdrawableProtocolFees"
      | "withdrawalBatchDuration"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accruedProtocolFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "annualInterestBips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowableAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "borrower", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closeMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coverageLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delinquencyFeeBips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delinquencyGracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delinquentDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUpTo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "effectiveBorrowerAPR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "effectiveLenderAPR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithdrawal",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithdrawals",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountWithdrawalStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableWithdrawalAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnpaidBatchExpiries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalBatch",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maximumDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nukeFromOrbit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "outstandingDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previousState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeBips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queueWithdrawal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayAndProcessUnpaidWithdrawalBatches",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDelinquentDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayOutstandingDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveRatioBips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scaleFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scaledBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "scaledTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sentinel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAnnualInterestBips",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalSupply",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveRatioBips",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stunningReversal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDebts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAccountAuthorizations",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawableProtocolFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalBatchDuration",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accruedProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "annualInterestBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowableAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coverageLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delinquencyFeeBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delinquencyGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delinquentDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositUpTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "effectiveBorrowerAPR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "effectiveLenderAPR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountWithdrawalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableWithdrawalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnpaidBatchExpiries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nukeFromOrbit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outstandingDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayAndProcessUnpaidWithdrawalBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayDelinquentDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayOutstandingDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveRatioBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaleFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sentinel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAnnualInterestBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveRatioBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stunningReversal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDebts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAccountAuthorizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalBatchDuration",
    data: BytesLike
  ): Result;

  events: {
    "AnnualInterestBipsUpdated(uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "AuthorizationStatusUpdated(address,uint8)": EventFragment;
    "Borrow(uint256)": EventFragment;
    "DebtRepaid(address,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "FeesCollected(uint256)": EventFragment;
    "MarketClosed(uint256)": EventFragment;
    "MaxTotalSupplyUpdated(uint256)": EventFragment;
    "ReserveRatioBipsUpdated(uint256)": EventFragment;
    "SanctionedAccountAssetsSentToEscrow(address,address,uint256)": EventFragment;
    "SanctionedAccountWithdrawalSentToEscrow(address,address,uint32,uint256)": EventFragment;
    "ScaleFactorUpdated(uint256,uint256,uint256,uint256)": EventFragment;
    "StateUpdated(uint256,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdrawal(address,uint256,uint256)": EventFragment;
    "WithdrawalBatchClosed(uint256)": EventFragment;
    "WithdrawalBatchCreated(uint256)": EventFragment;
    "WithdrawalBatchExpired(uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawalBatchPayment(uint256,uint256,uint256)": EventFragment;
    "WithdrawalExecuted(uint256,address,uint256)": EventFragment;
    "WithdrawalQueued(uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnnualInterestBipsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizationStatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DebtRepaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxTotalSupplyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveRatioBipsUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SanctionedAccountAssetsSentToEscrow"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SanctionedAccountWithdrawalSentToEscrow"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScaleFactorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalBatchClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalBatchCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalBatchExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalBatchPayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalQueued"): EventFragment;
}

export interface AnnualInterestBipsUpdatedEventObject {
  annualInterestBipsUpdated: BigNumber;
}
export type AnnualInterestBipsUpdatedEvent = TypedEvent<
  [BigNumber],
  AnnualInterestBipsUpdatedEventObject
>;

export type AnnualInterestBipsUpdatedEventFilter =
  TypedEventFilter<AnnualInterestBipsUpdatedEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface AuthorizationStatusUpdatedEventObject {
  account: string;
  role: number;
}
export type AuthorizationStatusUpdatedEvent = TypedEvent<
  [string, number],
  AuthorizationStatusUpdatedEventObject
>;

export type AuthorizationStatusUpdatedEventFilter =
  TypedEventFilter<AuthorizationStatusUpdatedEvent>;

export interface BorrowEventObject {
  assetAmount: BigNumber;
}
export type BorrowEvent = TypedEvent<[BigNumber], BorrowEventObject>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface DebtRepaidEventObject {
  from: string;
  assetAmount: BigNumber;
}
export type DebtRepaidEvent = TypedEvent<
  [string, BigNumber],
  DebtRepaidEventObject
>;

export type DebtRepaidEventFilter = TypedEventFilter<DebtRepaidEvent>;

export interface DepositEventObject {
  account: string;
  assetAmount: BigNumber;
  scaledAmount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface FeesCollectedEventObject {
  assets: BigNumber;
}
export type FeesCollectedEvent = TypedEvent<
  [BigNumber],
  FeesCollectedEventObject
>;

export type FeesCollectedEventFilter = TypedEventFilter<FeesCollectedEvent>;

export interface MarketClosedEventObject {
  timestamp: BigNumber;
}
export type MarketClosedEvent = TypedEvent<
  [BigNumber],
  MarketClosedEventObject
>;

export type MarketClosedEventFilter = TypedEventFilter<MarketClosedEvent>;

export interface MaxTotalSupplyUpdatedEventObject {
  assets: BigNumber;
}
export type MaxTotalSupplyUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxTotalSupplyUpdatedEventObject
>;

export type MaxTotalSupplyUpdatedEventFilter =
  TypedEventFilter<MaxTotalSupplyUpdatedEvent>;

export interface ReserveRatioBipsUpdatedEventObject {
  reserveRatioBipsUpdated: BigNumber;
}
export type ReserveRatioBipsUpdatedEvent = TypedEvent<
  [BigNumber],
  ReserveRatioBipsUpdatedEventObject
>;

export type ReserveRatioBipsUpdatedEventFilter =
  TypedEventFilter<ReserveRatioBipsUpdatedEvent>;

export interface SanctionedAccountAssetsSentToEscrowEventObject {
  account: string;
  escrow: string;
  amount: BigNumber;
}
export type SanctionedAccountAssetsSentToEscrowEvent = TypedEvent<
  [string, string, BigNumber],
  SanctionedAccountAssetsSentToEscrowEventObject
>;

export type SanctionedAccountAssetsSentToEscrowEventFilter =
  TypedEventFilter<SanctionedAccountAssetsSentToEscrowEvent>;

export interface SanctionedAccountWithdrawalSentToEscrowEventObject {
  account: string;
  escrow: string;
  expiry: number;
  amount: BigNumber;
}
export type SanctionedAccountWithdrawalSentToEscrowEvent = TypedEvent<
  [string, string, number, BigNumber],
  SanctionedAccountWithdrawalSentToEscrowEventObject
>;

export type SanctionedAccountWithdrawalSentToEscrowEventFilter =
  TypedEventFilter<SanctionedAccountWithdrawalSentToEscrowEvent>;

export interface ScaleFactorUpdatedEventObject {
  scaleFactor: BigNumber;
  baseInterestRay: BigNumber;
  delinquencyFeeRay: BigNumber;
  protocolFee: BigNumber;
}
export type ScaleFactorUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  ScaleFactorUpdatedEventObject
>;

export type ScaleFactorUpdatedEventFilter =
  TypedEventFilter<ScaleFactorUpdatedEvent>;

export interface StateUpdatedEventObject {
  scaleFactor: BigNumber;
  isDelinquent: boolean;
}
export type StateUpdatedEvent = TypedEvent<
  [BigNumber, boolean],
  StateUpdatedEventObject
>;

export type StateUpdatedEventFilter = TypedEventFilter<StateUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawalEventObject {
  account: string;
  assetAmount: BigNumber;
  scaledAmount: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface WithdrawalBatchClosedEventObject {
  expiry: BigNumber;
}
export type WithdrawalBatchClosedEvent = TypedEvent<
  [BigNumber],
  WithdrawalBatchClosedEventObject
>;

export type WithdrawalBatchClosedEventFilter =
  TypedEventFilter<WithdrawalBatchClosedEvent>;

export interface WithdrawalBatchCreatedEventObject {
  expiry: BigNumber;
}
export type WithdrawalBatchCreatedEvent = TypedEvent<
  [BigNumber],
  WithdrawalBatchCreatedEventObject
>;

export type WithdrawalBatchCreatedEventFilter =
  TypedEventFilter<WithdrawalBatchCreatedEvent>;

export interface WithdrawalBatchExpiredEventObject {
  expiry: BigNumber;
  scaledTotalAmount: BigNumber;
  scaledAmountBurned: BigNumber;
  normalizedAmountPaid: BigNumber;
}
export type WithdrawalBatchExpiredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  WithdrawalBatchExpiredEventObject
>;

export type WithdrawalBatchExpiredEventFilter =
  TypedEventFilter<WithdrawalBatchExpiredEvent>;

export interface WithdrawalBatchPaymentEventObject {
  expiry: BigNumber;
  scaledAmountBurned: BigNumber;
  normalizedAmountPaid: BigNumber;
}
export type WithdrawalBatchPaymentEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  WithdrawalBatchPaymentEventObject
>;

export type WithdrawalBatchPaymentEventFilter =
  TypedEventFilter<WithdrawalBatchPaymentEvent>;

export interface WithdrawalExecutedEventObject {
  expiry: BigNumber;
  account: string;
  normalizedAmount: BigNumber;
}
export type WithdrawalExecutedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  WithdrawalExecutedEventObject
>;

export type WithdrawalExecutedEventFilter =
  TypedEventFilter<WithdrawalExecutedEvent>;

export interface WithdrawalQueuedEventObject {
  expiry: BigNumber;
  account: string;
  scaledAmount: BigNumber;
  normalizedAmount: BigNumber;
}
export type WithdrawalQueuedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  WithdrawalQueuedEventObject
>;

export type WithdrawalQueuedEventFilter =
  TypedEventFilter<WithdrawalQueuedEvent>;

export interface WildcatMarket extends BaseContract {
  contractName: "WildcatMarket";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WildcatMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accruedProtocolFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    annualInterestBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrowableAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrower(overrides?: CallOverrides): Promise<[string]>;

    closeMarket(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    coverageLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentState(
      overrides?: CallOverrides
    ): Promise<[MarketStateStructOutput] & { state: MarketStateStructOutput }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    delinquencyFeeBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    delinquencyGracePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    delinquentDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositUpTo(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    effectiveBorrowerAPR(overrides?: CallOverrides): Promise<[BigNumber]>;

    effectiveLenderAPR(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeWithdrawal(
      accountAddress: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeWithdrawals(
      accountAddresses: PromiseOrValue<string>[],
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getAccountRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getAccountWithdrawalStatus(
      accountAddress: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[AccountWithdrawalStatusStructOutput]>;

    getAvailableWithdrawalAmount(
      accountAddress: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnpaidBatchExpiries(overrides?: CallOverrides): Promise<[number[]]>;

    getWithdrawalBatch(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[WithdrawalBatchStructOutput]>;

    maxTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    maximumDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nukeFromOrbit(
      accountAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    outstandingDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    previousState(
      overrides?: CallOverrides
    ): Promise<[MarketStateStructOutput]>;

    protocolFeeBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    queueWithdrawal(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayAndProcessUnpaidWithdrawalBatches(
      repayAmount: PromiseOrValue<BigNumberish>,
      maxBatches: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayDelinquentDebt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayOutstandingDebt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reserveRatioBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    scaleFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    scaledBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    sentinel(overrides?: CallOverrides): Promise<[string]>;

    setAnnualInterestBips(
      _annualInterestBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxTotalSupply(
      _maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReserveRatioBips(
      _reserveRatioBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stunningReversal(
      accountAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebts(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAccountAuthorizations(
      accounts: PromiseOrValue<string>[],
      authorize: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    withdrawableProtocolFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalBatchDuration(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  accruedProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  annualInterestBips(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrow(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrowableAssets(overrides?: CallOverrides): Promise<BigNumber>;

  borrower(overrides?: CallOverrides): Promise<string>;

  closeMarket(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  coverageLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  currentState(overrides?: CallOverrides): Promise<MarketStateStructOutput>;

  decimals(overrides?: CallOverrides): Promise<number>;

  delinquencyFeeBips(overrides?: CallOverrides): Promise<BigNumber>;

  delinquencyGracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  delinquentDebt(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositUpTo(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  effectiveBorrowerAPR(overrides?: CallOverrides): Promise<BigNumber>;

  effectiveLenderAPR(overrides?: CallOverrides): Promise<BigNumber>;

  executeWithdrawal(
    accountAddress: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeWithdrawals(
    accountAddresses: PromiseOrValue<string>[],
    expiries: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  getAccountRole(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getAccountWithdrawalStatus(
    accountAddress: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AccountWithdrawalStatusStructOutput>;

  getAvailableWithdrawalAmount(
    accountAddress: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnpaidBatchExpiries(overrides?: CallOverrides): Promise<number[]>;

  getWithdrawalBatch(
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<WithdrawalBatchStructOutput>;

  maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  maximumDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nukeFromOrbit(
    accountAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  outstandingDebt(overrides?: CallOverrides): Promise<BigNumber>;

  previousState(overrides?: CallOverrides): Promise<MarketStateStructOutput>;

  protocolFeeBips(overrides?: CallOverrides): Promise<BigNumber>;

  queueWithdrawal(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayAndProcessUnpaidWithdrawalBatches(
    repayAmount: PromiseOrValue<BigNumberish>,
    maxBatches: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayDelinquentDebt(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayOutstandingDebt(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reserveRatioBips(overrides?: CallOverrides): Promise<BigNumber>;

  scaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

  scaledBalanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  sentinel(overrides?: CallOverrides): Promise<string>;

  setAnnualInterestBips(
    _annualInterestBips: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxTotalSupply(
    _maxTotalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReserveRatioBips(
    _reserveRatioBips: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stunningReversal(
    accountAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebts(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAccountAuthorizations(
    accounts: PromiseOrValue<string>[],
    authorize: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  withdrawableProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalBatchDuration(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    accruedProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    annualInterestBips(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowableAssets(overrides?: CallOverrides): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<string>;

    closeMarket(overrides?: CallOverrides): Promise<void>;

    collectFees(overrides?: CallOverrides): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    coverageLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    currentState(overrides?: CallOverrides): Promise<MarketStateStructOutput>;

    decimals(overrides?: CallOverrides): Promise<number>;

    delinquencyFeeBips(overrides?: CallOverrides): Promise<BigNumber>;

    delinquencyGracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    delinquentDebt(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositUpTo(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    effectiveBorrowerAPR(overrides?: CallOverrides): Promise<BigNumber>;

    effectiveLenderAPR(overrides?: CallOverrides): Promise<BigNumber>;

    executeWithdrawal(
      accountAddress: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeWithdrawals(
      accountAddresses: PromiseOrValue<string>[],
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    getAccountRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getAccountWithdrawalStatus(
      accountAddress: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AccountWithdrawalStatusStructOutput>;

    getAvailableWithdrawalAmount(
      accountAddress: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnpaidBatchExpiries(overrides?: CallOverrides): Promise<number[]>;

    getWithdrawalBatch(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<WithdrawalBatchStructOutput>;

    maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    maximumDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nukeFromOrbit(
      accountAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    outstandingDebt(overrides?: CallOverrides): Promise<BigNumber>;

    previousState(overrides?: CallOverrides): Promise<MarketStateStructOutput>;

    protocolFeeBips(overrides?: CallOverrides): Promise<BigNumber>;

    queueWithdrawal(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayAndProcessUnpaidWithdrawalBatches(
      repayAmount: PromiseOrValue<BigNumberish>,
      maxBatches: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayDelinquentDebt(overrides?: CallOverrides): Promise<void>;

    repayOutstandingDebt(overrides?: CallOverrides): Promise<void>;

    reserveRatioBips(overrides?: CallOverrides): Promise<BigNumber>;

    scaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

    scaledBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    sentinel(overrides?: CallOverrides): Promise<string>;

    setAnnualInterestBips(
      _annualInterestBips: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTotalSupply(
      _maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveRatioBips(
      _reserveRatioBips: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stunningReversal(
      accountAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebts(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateAccountAuthorizations(
      accounts: PromiseOrValue<string>[],
      authorize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateState(overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    withdrawableProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalBatchDuration(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AnnualInterestBipsUpdated(uint256)"(
      annualInterestBipsUpdated?: null
    ): AnnualInterestBipsUpdatedEventFilter;
    AnnualInterestBipsUpdated(
      annualInterestBipsUpdated?: null
    ): AnnualInterestBipsUpdatedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "AuthorizationStatusUpdated(address,uint8)"(
      account?: PromiseOrValue<string> | null,
      role?: null
    ): AuthorizationStatusUpdatedEventFilter;
    AuthorizationStatusUpdated(
      account?: PromiseOrValue<string> | null,
      role?: null
    ): AuthorizationStatusUpdatedEventFilter;

    "Borrow(uint256)"(assetAmount?: null): BorrowEventFilter;
    Borrow(assetAmount?: null): BorrowEventFilter;

    "DebtRepaid(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      assetAmount?: null
    ): DebtRepaidEventFilter;
    DebtRepaid(
      from?: PromiseOrValue<string> | null,
      assetAmount?: null
    ): DebtRepaidEventFilter;

    "Deposit(address,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      assetAmount?: null,
      scaledAmount?: null
    ): DepositEventFilter;
    Deposit(
      account?: PromiseOrValue<string> | null,
      assetAmount?: null,
      scaledAmount?: null
    ): DepositEventFilter;

    "FeesCollected(uint256)"(assets?: null): FeesCollectedEventFilter;
    FeesCollected(assets?: null): FeesCollectedEventFilter;

    "MarketClosed(uint256)"(timestamp?: null): MarketClosedEventFilter;
    MarketClosed(timestamp?: null): MarketClosedEventFilter;

    "MaxTotalSupplyUpdated(uint256)"(
      assets?: null
    ): MaxTotalSupplyUpdatedEventFilter;
    MaxTotalSupplyUpdated(assets?: null): MaxTotalSupplyUpdatedEventFilter;

    "ReserveRatioBipsUpdated(uint256)"(
      reserveRatioBipsUpdated?: null
    ): ReserveRatioBipsUpdatedEventFilter;
    ReserveRatioBipsUpdated(
      reserveRatioBipsUpdated?: null
    ): ReserveRatioBipsUpdatedEventFilter;

    "SanctionedAccountAssetsSentToEscrow(address,address,uint256)"(
      account?: PromiseOrValue<string> | null,
      escrow?: null,
      amount?: null
    ): SanctionedAccountAssetsSentToEscrowEventFilter;
    SanctionedAccountAssetsSentToEscrow(
      account?: PromiseOrValue<string> | null,
      escrow?: null,
      amount?: null
    ): SanctionedAccountAssetsSentToEscrowEventFilter;

    "SanctionedAccountWithdrawalSentToEscrow(address,address,uint32,uint256)"(
      account?: PromiseOrValue<string> | null,
      escrow?: null,
      expiry?: null,
      amount?: null
    ): SanctionedAccountWithdrawalSentToEscrowEventFilter;
    SanctionedAccountWithdrawalSentToEscrow(
      account?: PromiseOrValue<string> | null,
      escrow?: null,
      expiry?: null,
      amount?: null
    ): SanctionedAccountWithdrawalSentToEscrowEventFilter;

    "ScaleFactorUpdated(uint256,uint256,uint256,uint256)"(
      scaleFactor?: null,
      baseInterestRay?: null,
      delinquencyFeeRay?: null,
      protocolFee?: null
    ): ScaleFactorUpdatedEventFilter;
    ScaleFactorUpdated(
      scaleFactor?: null,
      baseInterestRay?: null,
      delinquencyFeeRay?: null,
      protocolFee?: null
    ): ScaleFactorUpdatedEventFilter;

    "StateUpdated(uint256,bool)"(
      scaleFactor?: null,
      isDelinquent?: null
    ): StateUpdatedEventFilter;
    StateUpdated(
      scaleFactor?: null,
      isDelinquent?: null
    ): StateUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "Withdrawal(address,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      assetAmount?: null,
      scaledAmount?: null
    ): WithdrawalEventFilter;
    Withdrawal(
      account?: PromiseOrValue<string> | null,
      assetAmount?: null,
      scaledAmount?: null
    ): WithdrawalEventFilter;

    "WithdrawalBatchClosed(uint256)"(
      expiry?: PromiseOrValue<BigNumberish> | null
    ): WithdrawalBatchClosedEventFilter;
    WithdrawalBatchClosed(
      expiry?: PromiseOrValue<BigNumberish> | null
    ): WithdrawalBatchClosedEventFilter;

    "WithdrawalBatchCreated(uint256)"(
      expiry?: PromiseOrValue<BigNumberish> | null
    ): WithdrawalBatchCreatedEventFilter;
    WithdrawalBatchCreated(
      expiry?: PromiseOrValue<BigNumberish> | null
    ): WithdrawalBatchCreatedEventFilter;

    "WithdrawalBatchExpired(uint256,uint256,uint256,uint256)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      scaledTotalAmount?: null,
      scaledAmountBurned?: null,
      normalizedAmountPaid?: null
    ): WithdrawalBatchExpiredEventFilter;
    WithdrawalBatchExpired(
      expiry?: PromiseOrValue<BigNumberish> | null,
      scaledTotalAmount?: null,
      scaledAmountBurned?: null,
      normalizedAmountPaid?: null
    ): WithdrawalBatchExpiredEventFilter;

    "WithdrawalBatchPayment(uint256,uint256,uint256)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      scaledAmountBurned?: null,
      normalizedAmountPaid?: null
    ): WithdrawalBatchPaymentEventFilter;
    WithdrawalBatchPayment(
      expiry?: PromiseOrValue<BigNumberish> | null,
      scaledAmountBurned?: null,
      normalizedAmountPaid?: null
    ): WithdrawalBatchPaymentEventFilter;

    "WithdrawalExecuted(uint256,address,uint256)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      normalizedAmount?: null
    ): WithdrawalExecutedEventFilter;
    WithdrawalExecuted(
      expiry?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      normalizedAmount?: null
    ): WithdrawalExecutedEventFilter;

    "WithdrawalQueued(uint256,address,uint256,uint256)"(
      expiry?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      scaledAmount?: null,
      normalizedAmount?: null
    ): WithdrawalQueuedEventFilter;
    WithdrawalQueued(
      expiry?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      scaledAmount?: null,
      normalizedAmount?: null
    ): WithdrawalQueuedEventFilter;
  };

  estimateGas: {
    accruedProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    annualInterestBips(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrowableAssets(overrides?: CallOverrides): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<BigNumber>;

    closeMarket(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    coverageLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    currentState(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    delinquencyFeeBips(overrides?: CallOverrides): Promise<BigNumber>;

    delinquencyGracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    delinquentDebt(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositUpTo(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    effectiveBorrowerAPR(overrides?: CallOverrides): Promise<BigNumber>;

    effectiveLenderAPR(overrides?: CallOverrides): Promise<BigNumber>;

    executeWithdrawal(
      accountAddress: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeWithdrawals(
      accountAddresses: PromiseOrValue<string>[],
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountWithdrawalStatus(
      accountAddress: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableWithdrawalAmount(
      accountAddress: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnpaidBatchExpiries(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawalBatch(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    maximumDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nukeFromOrbit(
      accountAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    outstandingDebt(overrides?: CallOverrides): Promise<BigNumber>;

    previousState(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeBips(overrides?: CallOverrides): Promise<BigNumber>;

    queueWithdrawal(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayAndProcessUnpaidWithdrawalBatches(
      repayAmount: PromiseOrValue<BigNumberish>,
      maxBatches: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayDelinquentDebt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayOutstandingDebt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reserveRatioBips(overrides?: CallOverrides): Promise<BigNumber>;

    scaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

    scaledBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    sentinel(overrides?: CallOverrides): Promise<BigNumber>;

    setAnnualInterestBips(
      _annualInterestBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxTotalSupply(
      _maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReserveRatioBips(
      _reserveRatioBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stunningReversal(
      accountAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebts(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAccountAuthorizations(
      accounts: PromiseOrValue<string>[],
      authorize: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawableProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalBatchDuration(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accruedProtocolFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    annualInterestBips(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrowableAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeMarket(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coverageLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delinquencyFeeBips(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delinquencyGracePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delinquentDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositUpTo(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    effectiveBorrowerAPR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    effectiveLenderAPR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeWithdrawal(
      accountAddress: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeWithdrawals(
      accountAddresses: PromiseOrValue<string>[],
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountWithdrawalStatus(
      accountAddress: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableWithdrawalAmount(
      accountAddress: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnpaidBatchExpiries(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalBatch(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maximumDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nukeFromOrbit(
      accountAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    outstandingDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previousState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueWithdrawal(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayAndProcessUnpaidWithdrawalBatches(
      repayAmount: PromiseOrValue<BigNumberish>,
      maxBatches: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayDelinquentDebt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayOutstandingDebt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reserveRatioBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scaleFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scaledBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sentinel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAnnualInterestBips(
      _annualInterestBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTotalSupply(
      _maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReserveRatioBips(
      _reserveRatioBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stunningReversal(
      accountAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAccountAuthorizations(
      accounts: PromiseOrValue<string>[],
      authorize: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawableProtocolFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalBatchDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
