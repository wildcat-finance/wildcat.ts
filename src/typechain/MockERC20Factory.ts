/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MockERC20FactoryInterface extends utils.Interface {
  functions: {
    "deployMockERC20(string,string)": FunctionFragment;
    "deployerNonce(address)": FunctionFragment;
    "getDeployParameters()": FunctionFragment;
    "getNextTokenAddress(address)": FunctionFragment;
    "mockERC20InitCodeHash()": FunctionFragment;
    "mockERC20InitCodeStorage()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deployMockERC20"
      | "deployerNonce"
      | "getDeployParameters"
      | "getNextTokenAddress"
      | "mockERC20InitCodeHash"
      | "mockERC20InitCodeStorage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployMockERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployerNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextTokenAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mockERC20InitCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockERC20InitCodeStorage",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "deployMockERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployerNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockERC20InitCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockERC20InitCodeStorage",
    data: BytesLike
  ): Result;

  events: {
    "NewTokenDeployed(address,string,string,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewTokenDeployed"): EventFragment;
}

export interface NewTokenDeployedEventObject {
  token: string;
  name: string;
  symbol: string;
  decimals: number;
}
export type NewTokenDeployedEvent = TypedEvent<
  [string, string, string, number],
  NewTokenDeployedEventObject
>;

export type NewTokenDeployedEventFilter =
  TypedEventFilter<NewTokenDeployedEvent>;

export interface MockERC20Factory extends BaseContract {
  contractName: "MockERC20Factory";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockERC20FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployMockERC20(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployerNonce(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDeployParameters(
      overrides?: CallOverrides
    ): Promise<[string, string] & { name: string; symbol: string }>;

    getNextTokenAddress(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { tokenAddress: string }>;

    mockERC20InitCodeHash(overrides?: CallOverrides): Promise<[BigNumber]>;

    mockERC20InitCodeStorage(overrides?: CallOverrides): Promise<[string]>;
  };

  deployMockERC20(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployerNonce(
    deployer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDeployParameters(
    overrides?: CallOverrides
  ): Promise<[string, string] & { name: string; symbol: string }>;

  getNextTokenAddress(
    deployer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  mockERC20InitCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

  mockERC20InitCodeStorage(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deployMockERC20(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployerNonce(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeployParameters(
      overrides?: CallOverrides
    ): Promise<[string, string] & { name: string; symbol: string }>;

    getNextTokenAddress(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    mockERC20InitCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    mockERC20InitCodeStorage(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NewTokenDeployed(address,string,string,uint8)"(
      token?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      decimals?: null
    ): NewTokenDeployedEventFilter;
    NewTokenDeployed(
      token?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      decimals?: null
    ): NewTokenDeployedEventFilter;
  };

  estimateGas: {
    deployMockERC20(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployerNonce(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeployParameters(overrides?: CallOverrides): Promise<BigNumber>;

    getNextTokenAddress(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mockERC20InitCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    mockERC20InitCodeStorage(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deployMockERC20(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployerNonce(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeployParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextTokenAddress(
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mockERC20InitCodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mockERC20InitCodeStorage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
