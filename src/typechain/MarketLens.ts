/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type TokenMetadataStruct = {
  token: PromiseOrValue<string>;
  name: PromiseOrValue<string>;
  symbol: PromiseOrValue<string>;
  decimals: PromiseOrValue<BigNumberish>;
  isMock: PromiseOrValue<boolean>;
};

export type TokenMetadataStructOutput = [
  string,
  string,
  string,
  BigNumber,
  boolean
] & {
  token: string;
  name: string;
  symbol: string;
  decimals: BigNumber;
  isMock: boolean;
};

export type FeeConfigurationStruct = {
  feeRecipient: PromiseOrValue<string>;
  protocolFeeBips: PromiseOrValue<BigNumberish>;
  originationFeeToken: TokenMetadataStruct;
  originationFeeAmount: PromiseOrValue<BigNumberish>;
};

export type FeeConfigurationStructOutput = [
  string,
  number,
  TokenMetadataStructOutput,
  BigNumber
] & {
  feeRecipient: string;
  protocolFeeBips: number;
  originationFeeToken: TokenMetadataStructOutput;
  originationFeeAmount: BigNumber;
};

export type MarketParameterConstraintsStruct = {
  minimumDelinquencyGracePeriod: PromiseOrValue<BigNumberish>;
  maximumDelinquencyGracePeriod: PromiseOrValue<BigNumberish>;
  minimumReserveRatioBips: PromiseOrValue<BigNumberish>;
  maximumReserveRatioBips: PromiseOrValue<BigNumberish>;
  minimumDelinquencyFeeBips: PromiseOrValue<BigNumberish>;
  maximumDelinquencyFeeBips: PromiseOrValue<BigNumberish>;
  minimumWithdrawalBatchDuration: PromiseOrValue<BigNumberish>;
  maximumWithdrawalBatchDuration: PromiseOrValue<BigNumberish>;
  minimumAnnualInterestBips: PromiseOrValue<BigNumberish>;
  maximumAnnualInterestBips: PromiseOrValue<BigNumberish>;
};

export type MarketParameterConstraintsStructOutput = [
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number
] & {
  minimumDelinquencyGracePeriod: number;
  maximumDelinquencyGracePeriod: number;
  minimumReserveRatioBips: number;
  maximumReserveRatioBips: number;
  minimumDelinquencyFeeBips: number;
  maximumDelinquencyFeeBips: number;
  minimumWithdrawalBatchDuration: number;
  maximumWithdrawalBatchDuration: number;
  minimumAnnualInterestBips: number;
  maximumAnnualInterestBips: number;
};

export type MarketDataStruct = {
  marketToken: TokenMetadataStruct;
  underlyingToken: TokenMetadataStruct;
  borrower: PromiseOrValue<string>;
  controller: PromiseOrValue<string>;
  feeRecipient: PromiseOrValue<string>;
  protocolFeeBips: PromiseOrValue<BigNumberish>;
  delinquencyFeeBips: PromiseOrValue<BigNumberish>;
  delinquencyGracePeriod: PromiseOrValue<BigNumberish>;
  withdrawalBatchDuration: PromiseOrValue<BigNumberish>;
  reserveRatioBips: PromiseOrValue<BigNumberish>;
  annualInterestBips: PromiseOrValue<BigNumberish>;
  temporaryReserveRatio: PromiseOrValue<boolean>;
  originalAnnualInterestBips: PromiseOrValue<BigNumberish>;
  originalReserveRatioBips: PromiseOrValue<BigNumberish>;
  temporaryReserveRatioExpiry: PromiseOrValue<BigNumberish>;
  isClosed: PromiseOrValue<boolean>;
  scaleFactor: PromiseOrValue<BigNumberish>;
  totalSupply: PromiseOrValue<BigNumberish>;
  maxTotalSupply: PromiseOrValue<BigNumberish>;
  scaledTotalSupply: PromiseOrValue<BigNumberish>;
  totalAssets: PromiseOrValue<BigNumberish>;
  lastAccruedProtocolFees: PromiseOrValue<BigNumberish>;
  normalizedUnclaimedWithdrawals: PromiseOrValue<BigNumberish>;
  scaledPendingWithdrawals: PromiseOrValue<BigNumberish>;
  pendingWithdrawalExpiry: PromiseOrValue<BigNumberish>;
  isDelinquent: PromiseOrValue<boolean>;
  timeDelinquent: PromiseOrValue<BigNumberish>;
  lastInterestAccruedTimestamp: PromiseOrValue<BigNumberish>;
  unpaidWithdrawalBatchExpiries: PromiseOrValue<BigNumberish>[];
  coverageLiquidity: PromiseOrValue<BigNumberish>;
  borrowableAssets: PromiseOrValue<BigNumberish>;
  delinquentDebt: PromiseOrValue<BigNumberish>;
};

export type MarketDataStructOutput = [
  TokenMetadataStructOutput,
  TokenMetadataStructOutput,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  BigNumber,
  number[],
  BigNumber,
  BigNumber,
  BigNumber
] & {
  marketToken: TokenMetadataStructOutput;
  underlyingToken: TokenMetadataStructOutput;
  borrower: string;
  controller: string;
  feeRecipient: string;
  protocolFeeBips: BigNumber;
  delinquencyFeeBips: BigNumber;
  delinquencyGracePeriod: BigNumber;
  withdrawalBatchDuration: BigNumber;
  reserveRatioBips: BigNumber;
  annualInterestBips: BigNumber;
  temporaryReserveRatio: boolean;
  originalAnnualInterestBips: BigNumber;
  originalReserveRatioBips: BigNumber;
  temporaryReserveRatioExpiry: BigNumber;
  isClosed: boolean;
  scaleFactor: BigNumber;
  totalSupply: BigNumber;
  maxTotalSupply: BigNumber;
  scaledTotalSupply: BigNumber;
  totalAssets: BigNumber;
  lastAccruedProtocolFees: BigNumber;
  normalizedUnclaimedWithdrawals: BigNumber;
  scaledPendingWithdrawals: BigNumber;
  pendingWithdrawalExpiry: BigNumber;
  isDelinquent: boolean;
  timeDelinquent: BigNumber;
  lastInterestAccruedTimestamp: BigNumber;
  unpaidWithdrawalBatchExpiries: number[];
  coverageLiquidity: BigNumber;
  borrowableAssets: BigNumber;
  delinquentDebt: BigNumber;
};

export type ControllerDataStruct = {
  borrower: PromiseOrValue<string>;
  controller: PromiseOrValue<string>;
  controllerFactory: PromiseOrValue<string>;
  isRegisteredBorrower: PromiseOrValue<boolean>;
  hasDeployedController: PromiseOrValue<boolean>;
  fees: FeeConfigurationStruct;
  constraints: MarketParameterConstraintsStruct;
  markets: MarketDataStruct[];
  borrowerOriginationFeeBalance: PromiseOrValue<BigNumberish>;
  borrowerOriginationFeeApproval: PromiseOrValue<BigNumberish>;
};

export type ControllerDataStructOutput = [
  string,
  string,
  string,
  boolean,
  boolean,
  FeeConfigurationStructOutput,
  MarketParameterConstraintsStructOutput,
  MarketDataStructOutput[],
  BigNumber,
  BigNumber
] & {
  borrower: string;
  controller: string;
  controllerFactory: string;
  isRegisteredBorrower: boolean;
  hasDeployedController: boolean;
  fees: FeeConfigurationStructOutput;
  constraints: MarketParameterConstraintsStructOutput;
  markets: MarketDataStructOutput[];
  borrowerOriginationFeeBalance: BigNumber;
  borrowerOriginationFeeApproval: BigNumber;
};

export type MarketLenderStatusStruct = {
  lender: PromiseOrValue<string>;
  isAuthorizedOnController: PromiseOrValue<boolean>;
  role: PromiseOrValue<BigNumberish>;
  scaledBalance: PromiseOrValue<BigNumberish>;
  normalizedBalance: PromiseOrValue<BigNumberish>;
  underlyingBalance: PromiseOrValue<BigNumberish>;
  underlyingApproval: PromiseOrValue<BigNumberish>;
};

export type MarketLenderStatusStructOutput = [
  string,
  boolean,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  lender: string;
  isAuthorizedOnController: boolean;
  role: number;
  scaledBalance: BigNumber;
  normalizedBalance: BigNumber;
  underlyingBalance: BigNumber;
  underlyingApproval: BigNumber;
};

export type MarketDataWithLenderStatusStruct = {
  market: MarketDataStruct;
  lenderStatus: MarketLenderStatusStruct;
};

export type MarketDataWithLenderStatusStructOutput = [
  MarketDataStructOutput,
  MarketLenderStatusStructOutput
] & {
  market: MarketDataStructOutput;
  lenderStatus: MarketLenderStatusStructOutput;
};

export type ArchControllerDataStruct = {
  archController: PromiseOrValue<string>;
  borrowersCount: PromiseOrValue<BigNumberish>;
  borrowers: PromiseOrValue<string>[];
  controllerFactoriesCount: PromiseOrValue<BigNumberish>;
  controllerFactories: PromiseOrValue<string>[];
  controllersCount: PromiseOrValue<BigNumberish>;
  controllers: PromiseOrValue<string>[];
  marketsCount: PromiseOrValue<BigNumberish>;
  markets: PromiseOrValue<string>[];
};

export type ArchControllerDataStructOutput = [
  string,
  BigNumber,
  string[],
  BigNumber,
  string[],
  BigNumber,
  string[],
  BigNumber,
  string[]
] & {
  archController: string;
  borrowersCount: BigNumber;
  borrowers: string[];
  controllerFactoriesCount: BigNumber;
  controllerFactories: string[];
  controllersCount: BigNumber;
  controllers: string[];
  marketsCount: BigNumber;
  markets: string[];
};

export type SliceParametersStruct = {
  start: PromiseOrValue<BigNumberish>;
  end: PromiseOrValue<BigNumberish>;
};

export type SliceParametersStructOutput = [BigNumber, BigNumber] & {
  start: BigNumber;
  end: BigNumber;
};

export type WithdrawalBatchDataStruct = {
  expiry: PromiseOrValue<BigNumberish>;
  status: PromiseOrValue<BigNumberish>;
  scaledTotalAmount: PromiseOrValue<BigNumberish>;
  scaledAmountBurned: PromiseOrValue<BigNumberish>;
  normalizedAmountPaid: PromiseOrValue<BigNumberish>;
  normalizedTotalAmount: PromiseOrValue<BigNumberish>;
};

export type WithdrawalBatchDataStructOutput = [
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  expiry: number;
  status: number;
  scaledTotalAmount: BigNumber;
  scaledAmountBurned: BigNumber;
  normalizedAmountPaid: BigNumber;
  normalizedTotalAmount: BigNumber;
};

export type WithdrawalBatchLenderStatusStruct = {
  lender: PromiseOrValue<string>;
  scaledAmount: PromiseOrValue<BigNumberish>;
  normalizedAmountWithdrawn: PromiseOrValue<BigNumberish>;
  normalizedAmountOwed: PromiseOrValue<BigNumberish>;
  availableWithdrawalAmount: PromiseOrValue<BigNumberish>;
};

export type WithdrawalBatchLenderStatusStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  lender: string;
  scaledAmount: BigNumber;
  normalizedAmountWithdrawn: BigNumber;
  normalizedAmountOwed: BigNumber;
  availableWithdrawalAmount: BigNumber;
};

export type WithdrawalBatchDataWithLenderStatusStruct = {
  batch: WithdrawalBatchDataStruct;
  lenderStatus: WithdrawalBatchLenderStatusStruct;
};

export type WithdrawalBatchDataWithLenderStatusStructOutput = [
  WithdrawalBatchDataStructOutput,
  WithdrawalBatchLenderStatusStructOutput
] & {
  batch: WithdrawalBatchDataStructOutput;
  lenderStatus: WithdrawalBatchLenderStatusStructOutput;
};

export interface MarketLensInterface extends utils.Interface {
  functions: {
    "archController()": FunctionFragment;
    "controllerFactory()": FunctionFragment;
    "getAllControllersDataForBorrowers()": FunctionFragment;
    "getAllMarketsData()": FunctionFragment;
    "getAllMarketsDataWithLenderStatus(address)": FunctionFragment;
    "getAllMarketsLenderStatus(address)": FunctionFragment;
    "getArchControllerData()": FunctionFragment;
    "getControllerDataForBorrower(address)": FunctionFragment;
    "getControllersDataForBorrowers(address[])": FunctionFragment;
    "getMarketData(address)": FunctionFragment;
    "getMarketDataWithLenderStatus(address,address)": FunctionFragment;
    "getMarketLenderStatus(address,address)": FunctionFragment;
    "getMarketsCount()": FunctionFragment;
    "getMarketsData(address[])": FunctionFragment;
    "getMarketsDataWithLenderStatus(address,address[])": FunctionFragment;
    "getMarketsLenderStatus(address,address[])": FunctionFragment;
    "getPaginatedArchControllerData((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256))": FunctionFragment;
    "getPaginatedControllersDataForBorrowers(uint256,uint256)": FunctionFragment;
    "getPaginatedMarketsData(uint256,uint256)": FunctionFragment;
    "getPaginatedMarketsDataWithLenderStatus(address,uint256,uint256)": FunctionFragment;
    "getTokenInfo(address)": FunctionFragment;
    "getTokensInfo(address[])": FunctionFragment;
    "getWithdrawalBatchData(address,uint32)": FunctionFragment;
    "getWithdrawalBatchDataWithLenderStatus(address,uint32,address)": FunctionFragment;
    "getWithdrawalBatchDataWithLendersStatus(address,uint32,address[])": FunctionFragment;
    "getWithdrawalBatchesData(address,uint32[])": FunctionFragment;
    "getWithdrawalBatchesDataWithLenderStatus(address,uint32[],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "archController"
      | "controllerFactory"
      | "getAllControllersDataForBorrowers"
      | "getAllMarketsData"
      | "getAllMarketsDataWithLenderStatus"
      | "getAllMarketsLenderStatus"
      | "getArchControllerData"
      | "getControllerDataForBorrower"
      | "getControllersDataForBorrowers"
      | "getMarketData"
      | "getMarketDataWithLenderStatus"
      | "getMarketLenderStatus"
      | "getMarketsCount"
      | "getMarketsData"
      | "getMarketsDataWithLenderStatus"
      | "getMarketsLenderStatus"
      | "getPaginatedArchControllerData"
      | "getPaginatedControllersDataForBorrowers"
      | "getPaginatedMarketsData"
      | "getPaginatedMarketsDataWithLenderStatus"
      | "getTokenInfo"
      | "getTokensInfo"
      | "getWithdrawalBatchData"
      | "getWithdrawalBatchDataWithLenderStatus"
      | "getWithdrawalBatchDataWithLendersStatus"
      | "getWithdrawalBatchesData"
      | "getWithdrawalBatchesDataWithLenderStatus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "archController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllerFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllControllersDataForBorrowers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarketsData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarketsDataWithLenderStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarketsLenderStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getArchControllerData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getControllerDataForBorrower",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getControllersDataForBorrowers",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketDataWithLenderStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketLenderStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketsData",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketsDataWithLenderStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketsLenderStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedArchControllerData",
    values: [
      SliceParametersStruct,
      SliceParametersStruct,
      SliceParametersStruct,
      SliceParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedControllersDataForBorrowers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedMarketsData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedMarketsDataWithLenderStatus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensInfo",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalBatchData",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalBatchDataWithLenderStatus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalBatchDataWithLendersStatus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalBatchesData",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalBatchesDataWithLenderStatus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "archController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllControllersDataForBorrowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarketsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarketsDataWithLenderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarketsLenderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArchControllerData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getControllerDataForBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getControllersDataForBorrowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketDataWithLenderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketLenderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketsDataWithLenderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketsLenderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedArchControllerData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedControllersDataForBorrowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedMarketsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedMarketsDataWithLenderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalBatchData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalBatchDataWithLenderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalBatchDataWithLendersStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalBatchesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalBatchesDataWithLenderStatus",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MarketLens extends BaseContract {
  contractName: "MarketLens";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketLensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    archController(overrides?: CallOverrides): Promise<[string]>;

    controllerFactory(overrides?: CallOverrides): Promise<[string]>;

    getAllControllersDataForBorrowers(
      overrides?: CallOverrides
    ): Promise<
      [ControllerDataStructOutput[]] & { data: ControllerDataStructOutput[] }
    >;

    getAllMarketsData(
      overrides?: CallOverrides
    ): Promise<[MarketDataStructOutput[]] & { data: MarketDataStructOutput[] }>;

    getAllMarketsDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [MarketDataWithLenderStatusStructOutput[]] & {
        data: MarketDataWithLenderStatusStructOutput[];
      }
    >;

    getAllMarketsLenderStatus(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [MarketLenderStatusStructOutput[]] & {
        status: MarketLenderStatusStructOutput[];
      }
    >;

    getArchControllerData(
      overrides?: CallOverrides
    ): Promise<
      [ArchControllerDataStructOutput] & {
        data: ArchControllerDataStructOutput;
      }
    >;

    getControllerDataForBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ControllerDataStructOutput] & { data: ControllerDataStructOutput }
    >;

    getControllersDataForBorrowers(
      borrowers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [ControllerDataStructOutput[]] & { data: ControllerDataStructOutput[] }
    >;

    getMarketData(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[MarketDataStructOutput] & { data: MarketDataStructOutput }>;

    getMarketDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [MarketDataWithLenderStatusStructOutput] & {
        data: MarketDataWithLenderStatusStructOutput;
      }
    >;

    getMarketLenderStatus(
      lender: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [MarketLenderStatusStructOutput] & {
        status: MarketLenderStatusStructOutput;
      }
    >;

    getMarketsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarketsData(
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[MarketDataStructOutput[]] & { data: MarketDataStructOutput[] }>;

    getMarketsDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [MarketDataWithLenderStatusStructOutput[]] & {
        data: MarketDataWithLenderStatusStructOutput[];
      }
    >;

    getMarketsLenderStatus(
      lender: PromiseOrValue<string>,
      market: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [MarketLenderStatusStructOutput[]] & {
        status: MarketLenderStatusStructOutput[];
      }
    >;

    getPaginatedArchControllerData(
      borrowersSlice: SliceParametersStruct,
      controllerFactoriesSlice: SliceParametersStruct,
      controllersSlice: SliceParametersStruct,
      marketsSlice: SliceParametersStruct,
      overrides?: CallOverrides
    ): Promise<
      [ArchControllerDataStructOutput] & {
        data: ArchControllerDataStructOutput;
      }
    >;

    getPaginatedControllersDataForBorrowers(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ControllerDataStructOutput[]] & { data: ControllerDataStructOutput[] }
    >;

    getPaginatedMarketsData(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MarketDataStructOutput[]] & { data: MarketDataStructOutput[] }>;

    getPaginatedMarketsDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [MarketDataWithLenderStatusStructOutput[]] & {
        data: MarketDataWithLenderStatusStructOutput[];
      }
    >;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [TokenMetadataStructOutput] & { info: TokenMetadataStructOutput }
    >;

    getTokensInfo(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [TokenMetadataStructOutput[]] & { info: TokenMetadataStructOutput[] }
    >;

    getWithdrawalBatchData(
      market: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [WithdrawalBatchDataStructOutput] & {
        data: WithdrawalBatchDataStructOutput;
      }
    >;

    getWithdrawalBatchDataWithLenderStatus(
      market: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [WithdrawalBatchDataWithLenderStatusStructOutput] & {
        status: WithdrawalBatchDataWithLenderStatusStructOutput;
      }
    >;

    getWithdrawalBatchDataWithLendersStatus(
      market: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      lenders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [
        WithdrawalBatchDataStructOutput,
        WithdrawalBatchLenderStatusStructOutput[]
      ] & {
        batch: WithdrawalBatchDataStructOutput;
        statuses: WithdrawalBatchLenderStatusStructOutput[];
      }
    >;

    getWithdrawalBatchesData(
      market: PromiseOrValue<string>,
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [WithdrawalBatchDataStructOutput[]] & {
        data: WithdrawalBatchDataStructOutput[];
      }
    >;

    getWithdrawalBatchesDataWithLenderStatus(
      market: PromiseOrValue<string>,
      expiries: PromiseOrValue<BigNumberish>[],
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [WithdrawalBatchDataWithLenderStatusStructOutput[]] & {
        statuses: WithdrawalBatchDataWithLenderStatusStructOutput[];
      }
    >;
  };

  archController(overrides?: CallOverrides): Promise<string>;

  controllerFactory(overrides?: CallOverrides): Promise<string>;

  getAllControllersDataForBorrowers(
    overrides?: CallOverrides
  ): Promise<ControllerDataStructOutput[]>;

  getAllMarketsData(
    overrides?: CallOverrides
  ): Promise<MarketDataStructOutput[]>;

  getAllMarketsDataWithLenderStatus(
    lender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MarketDataWithLenderStatusStructOutput[]>;

  getAllMarketsLenderStatus(
    lender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MarketLenderStatusStructOutput[]>;

  getArchControllerData(
    overrides?: CallOverrides
  ): Promise<ArchControllerDataStructOutput>;

  getControllerDataForBorrower(
    borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ControllerDataStructOutput>;

  getControllersDataForBorrowers(
    borrowers: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<ControllerDataStructOutput[]>;

  getMarketData(
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MarketDataStructOutput>;

  getMarketDataWithLenderStatus(
    lender: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MarketDataWithLenderStatusStructOutput>;

  getMarketLenderStatus(
    lender: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MarketLenderStatusStructOutput>;

  getMarketsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getMarketsData(
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MarketDataStructOutput[]>;

  getMarketsDataWithLenderStatus(
    lender: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MarketDataWithLenderStatusStructOutput[]>;

  getMarketsLenderStatus(
    lender: PromiseOrValue<string>,
    market: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MarketLenderStatusStructOutput[]>;

  getPaginatedArchControllerData(
    borrowersSlice: SliceParametersStruct,
    controllerFactoriesSlice: SliceParametersStruct,
    controllersSlice: SliceParametersStruct,
    marketsSlice: SliceParametersStruct,
    overrides?: CallOverrides
  ): Promise<ArchControllerDataStructOutput>;

  getPaginatedControllersDataForBorrowers(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ControllerDataStructOutput[]>;

  getPaginatedMarketsData(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MarketDataStructOutput[]>;

  getPaginatedMarketsDataWithLenderStatus(
    lender: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MarketDataWithLenderStatusStructOutput[]>;

  getTokenInfo(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<TokenMetadataStructOutput>;

  getTokensInfo(
    tokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<TokenMetadataStructOutput[]>;

  getWithdrawalBatchData(
    market: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<WithdrawalBatchDataStructOutput>;

  getWithdrawalBatchDataWithLenderStatus(
    market: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    lender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<WithdrawalBatchDataWithLenderStatusStructOutput>;

  getWithdrawalBatchDataWithLendersStatus(
    market: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    lenders: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<
    [
      WithdrawalBatchDataStructOutput,
      WithdrawalBatchLenderStatusStructOutput[]
    ] & {
      batch: WithdrawalBatchDataStructOutput;
      statuses: WithdrawalBatchLenderStatusStructOutput[];
    }
  >;

  getWithdrawalBatchesData(
    market: PromiseOrValue<string>,
    expiries: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<WithdrawalBatchDataStructOutput[]>;

  getWithdrawalBatchesDataWithLenderStatus(
    market: PromiseOrValue<string>,
    expiries: PromiseOrValue<BigNumberish>[],
    lender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<WithdrawalBatchDataWithLenderStatusStructOutput[]>;

  callStatic: {
    archController(overrides?: CallOverrides): Promise<string>;

    controllerFactory(overrides?: CallOverrides): Promise<string>;

    getAllControllersDataForBorrowers(
      overrides?: CallOverrides
    ): Promise<ControllerDataStructOutput[]>;

    getAllMarketsData(
      overrides?: CallOverrides
    ): Promise<MarketDataStructOutput[]>;

    getAllMarketsDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MarketDataWithLenderStatusStructOutput[]>;

    getAllMarketsLenderStatus(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MarketLenderStatusStructOutput[]>;

    getArchControllerData(
      overrides?: CallOverrides
    ): Promise<ArchControllerDataStructOutput>;

    getControllerDataForBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ControllerDataStructOutput>;

    getControllersDataForBorrowers(
      borrowers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<ControllerDataStructOutput[]>;

    getMarketData(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MarketDataStructOutput>;

    getMarketDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MarketDataWithLenderStatusStructOutput>;

    getMarketLenderStatus(
      lender: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MarketLenderStatusStructOutput>;

    getMarketsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketsData(
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MarketDataStructOutput[]>;

    getMarketsDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MarketDataWithLenderStatusStructOutput[]>;

    getMarketsLenderStatus(
      lender: PromiseOrValue<string>,
      market: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MarketLenderStatusStructOutput[]>;

    getPaginatedArchControllerData(
      borrowersSlice: SliceParametersStruct,
      controllerFactoriesSlice: SliceParametersStruct,
      controllersSlice: SliceParametersStruct,
      marketsSlice: SliceParametersStruct,
      overrides?: CallOverrides
    ): Promise<ArchControllerDataStructOutput>;

    getPaginatedControllersDataForBorrowers(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ControllerDataStructOutput[]>;

    getPaginatedMarketsData(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MarketDataStructOutput[]>;

    getPaginatedMarketsDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MarketDataWithLenderStatusStructOutput[]>;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<TokenMetadataStructOutput>;

    getTokensInfo(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<TokenMetadataStructOutput[]>;

    getWithdrawalBatchData(
      market: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<WithdrawalBatchDataStructOutput>;

    getWithdrawalBatchDataWithLenderStatus(
      market: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<WithdrawalBatchDataWithLenderStatusStructOutput>;

    getWithdrawalBatchDataWithLendersStatus(
      market: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      lenders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [
        WithdrawalBatchDataStructOutput,
        WithdrawalBatchLenderStatusStructOutput[]
      ] & {
        batch: WithdrawalBatchDataStructOutput;
        statuses: WithdrawalBatchLenderStatusStructOutput[];
      }
    >;

    getWithdrawalBatchesData(
      market: PromiseOrValue<string>,
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<WithdrawalBatchDataStructOutput[]>;

    getWithdrawalBatchesDataWithLenderStatus(
      market: PromiseOrValue<string>,
      expiries: PromiseOrValue<BigNumberish>[],
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<WithdrawalBatchDataWithLenderStatusStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    archController(overrides?: CallOverrides): Promise<BigNumber>;

    controllerFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getAllControllersDataForBorrowers(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllMarketsData(overrides?: CallOverrides): Promise<BigNumber>;

    getAllMarketsDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllMarketsLenderStatus(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArchControllerData(overrides?: CallOverrides): Promise<BigNumber>;

    getControllerDataForBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getControllersDataForBorrowers(
      borrowers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketData(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketLenderStatus(
      lender: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketsData(
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketsDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketsLenderStatus(
      lender: PromiseOrValue<string>,
      market: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaginatedArchControllerData(
      borrowersSlice: SliceParametersStruct,
      controllerFactoriesSlice: SliceParametersStruct,
      controllersSlice: SliceParametersStruct,
      marketsSlice: SliceParametersStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaginatedControllersDataForBorrowers(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaginatedMarketsData(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaginatedMarketsDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensInfo(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalBatchData(
      market: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalBatchDataWithLenderStatus(
      market: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalBatchDataWithLendersStatus(
      market: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      lenders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalBatchesData(
      market: PromiseOrValue<string>,
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalBatchesDataWithLenderStatus(
      market: PromiseOrValue<string>,
      expiries: PromiseOrValue<BigNumberish>[],
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    archController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllerFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllControllersDataForBorrowers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllMarketsData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllMarketsDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllMarketsLenderStatus(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArchControllerData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getControllerDataForBorrower(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getControllersDataForBorrowers(
      borrowers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketData(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketLenderStatus(
      lender: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketsData(
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketsDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketsLenderStatus(
      lender: PromiseOrValue<string>,
      market: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaginatedArchControllerData(
      borrowersSlice: SliceParametersStruct,
      controllerFactoriesSlice: SliceParametersStruct,
      controllersSlice: SliceParametersStruct,
      marketsSlice: SliceParametersStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaginatedControllersDataForBorrowers(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaginatedMarketsData(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaginatedMarketsDataWithLenderStatus(
      lender: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenInfo(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensInfo(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalBatchData(
      market: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalBatchDataWithLenderStatus(
      market: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalBatchDataWithLendersStatus(
      market: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      lenders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalBatchesData(
      market: PromiseOrValue<string>,
      expiries: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalBatchesDataWithLenderStatus(
      market: PromiseOrValue<string>,
      expiries: PromiseOrValue<BigNumberish>[],
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
