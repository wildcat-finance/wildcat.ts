/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CheckSafeSignature,
  CheckSafeSignatureInterface,
} from "../../CheckSignatureValid.sol/CheckSafeSignature";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "safeAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b5060405161074938038061074983398181016040528101906100319190610523565b5f8390505f6320c13b0b60e01b84846040516024016100519291906105fd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090505f808373ffffffffffffffffffffffffffffffffffffffff16836040516100d7919061066c565b5f60405180830381855afa9150503d805f811461010f576040519150601f19603f3d011682016040523d82523d5f602084013e610114565b606091505b50915091505f82801561017e57506320c13b0b60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168280602001905181019061015d91906106d7565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050806102e1575f631626ba7e60e01b61019d896102e960201b60201c565b886040516024016101af92919061071a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090505f808773ffffffffffffffffffffffffffffffffffffffff1683604051610235919061066c565b5f60405180830381855afa9150503d805f811461026d576040519150601f19603f3d011682016040523d82523d5f602084013e610272565b606091505b50915091508180156102db5750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916818060200190518101906102ba91906106d7565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b93505050505b805f5260205ff35b5f815160207f19457468657265756d205369676e6564204d6573736167653a0a00000000000081525f8052815b60011561033857600182039150600a81066030018253600a8104905080610316575b5080603a03602081113d3d3e80515f51178552828101816020038601209350828552505050919050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61039c82610373565b9050919050565b6103ac81610392565b81146103b6575f80fd5b50565b5f815190506103c7816103a3565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61041b826103d5565b810181811067ffffffffffffffff8211171561043a576104396103e5565b5b80604052505050565b5f61044c610362565b90506104588282610412565b919050565b5f67ffffffffffffffff821115610477576104766103e5565b5b610480826103d5565b9050602081019050919050565b5f5b838110156104aa57808201518184015260208101905061048f565b5f8484015250505050565b5f6104c76104c28461045d565b610443565b9050828152602081018484840111156104e3576104e26103d1565b5b6104ee84828561048d565b509392505050565b5f82601f83011261050a576105096103cd565b5b815161051a8482602086016104b5565b91505092915050565b5f805f6060848603121561053a5761053961036b565b5b5f610547868287016103b9565b935050602084015167ffffffffffffffff8111156105685761056761036f565b5b610574868287016104f6565b925050604084015167ffffffffffffffff8111156105955761059461036f565b5b6105a1868287016104f6565b9150509250925092565b5f81519050919050565b5f82825260208201905092915050565b5f6105cf826105ab565b6105d981856105b5565b93506105e981856020860161048d565b6105f2816103d5565b840191505092915050565b5f6040820190508181035f83015261061581856105c5565b9050818103602083015261062981846105c5565b90509392505050565b5f81905092915050565b5f610646826105ab565b6106508185610632565b935061066081856020860161048d565b80840191505092915050565b5f610677828461063c565b915081905092915050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6106b681610682565b81146106c0575f80fd5b50565b5f815190506106d1816106ad565b92915050565b5f602082840312156106ec576106eb61036b565b5b5f6106f9848285016106c3565b91505092915050565b5f819050919050565b61071481610702565b82525050565b5f60408201905061072d5f83018561070b565b818103602083015261073f81846105c5565b9050939250505056fe";

type CheckSafeSignatureConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CheckSafeSignatureConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CheckSafeSignature__factory extends ContractFactory {
  constructor(...args: CheckSafeSignatureConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CheckSafeSignature";
  }

  override deploy(
    safeAddress: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CheckSafeSignature> {
    return super.deploy(
      safeAddress,
      message,
      signature,
      overrides || {}
    ) as Promise<CheckSafeSignature>;
  }
  override getDeployTransaction(
    safeAddress: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      safeAddress,
      message,
      signature,
      overrides || {}
    );
  }
  override attach(address: string): CheckSafeSignature {
    return super.attach(address) as CheckSafeSignature;
  }
  override connect(signer: Signer): CheckSafeSignature__factory {
    return super.connect(signer) as CheckSafeSignature__factory;
  }
  static readonly contractName: "CheckSafeSignature";

  public readonly contractName: "CheckSafeSignature";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CheckSafeSignatureInterface {
    return new utils.Interface(_abi) as CheckSafeSignatureInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CheckSafeSignature {
    return new Contract(address, _abi, signerOrProvider) as CheckSafeSignature;
  }
}
