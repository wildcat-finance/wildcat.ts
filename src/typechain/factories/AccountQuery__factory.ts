/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { AccountQuery, AccountQueryInterface } from "../AccountQuery";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "describeAccount",
    outputs: [
      {
        components: [
          {
            internalType: "enum AccountKind",
            name: "kind",
            type: "uint8",
          },
          {
            internalType: "address[]",
            name: "owners",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "threshold",
            type: "uint256",
          },
        ],
        internalType: "struct AccountDescription",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801562000010575f80fd5b5060405162000a4538038062000a45833981810160405281019062000036919062000628565b5f62000048826200007760201b60201c565b90505f816040516020016200005e919062000808565b6040516020818303038152906040529050805160208201f35b6200008162000582565b5f8273ffffffffffffffffffffffffffffffffffffffff163b03620000db575f815f01906002811115620000ba57620000b962000658565b5b90816002811115620000d157620000d062000658565b5b81525050620002da565b5f63a619486e5f525f806004601c865afa156200011c5760203d036200011b5760205f803e73ffffffffffffffffffffffffffffffffffffffff5f511690505b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156200016657506200016581620002df60201b60201c565b5b15620002a1576001825f0190600281111562000187576200018662000658565b5b908160028111156200019e576200019d62000658565b5b815250505f8390508073ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b81526004015f60405180830381865afa158015620001ef573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019062000219919062000996565b83602001819052508073ffffffffffffffffffffffffffffffffffffffff1663e75235b86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200026b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062000291919062000a14565b83604001818152505050620002d8565b6002825f01906002811115620002bc57620002bb62000658565b5b90816002811115620002d357620002d262000658565b5b815250505b505b919050565b5f73b6029ea3b2c51d09a50b53ca8012feeb05bda35a73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806200036e57507334cfac646f301356faa8b21e94227e3583fe3f5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80620003b95750736851d6fdfafd08c0295c392436245e5bc78b018573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8062000404575073d9db270c1b5e3bd161e8c8503c55ceabee70955273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806200044f57507369f4d1788e39c87893c980c06edf4b7f686e293873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806200049a5750733e5c63644e683549055b9be8653de26e0b4cd36e73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80620004e5575073fb1bffc9d739b8d520daf37df666da4c687191ea73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806200053057507341675c099f32341bf84bfc5382af534df5c7461a73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806200057b57507329fcb43b46531bca003ddc8fcb67ffe91900c76273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b60405180606001604052805f6002811115620005a357620005a262000658565b5b8152602001606081526020015f81525090565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620005f282620005c7565b9050919050565b6200060481620005e6565b81146200060f575f80fd5b50565b5f815190506200062281620005f9565b92915050565b5f6020828403121562000640576200063f620005bf565b5b5f6200064f8482850162000612565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6003811062000699576200069862000658565b5b50565b5f819050620006ab8262000685565b919050565b5f620006bc826200069c565b9050919050565b620006ce81620006b0565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6200070881620005e6565b82525050565b5f6200071b8383620006fd565b60208301905092915050565b5f602082019050919050565b5f6200073f82620006d4565b6200074b8185620006de565b93506200075883620006ee565b805f5b838110156200078e5781516200077288826200070e565b97506200077f8362000727565b9250506001810190506200075b565b5085935050505092915050565b5f819050919050565b620007af816200079b565b82525050565b5f606083015f830151620007cc5f860182620006c3565b5060208301518482036020860152620007e6828262000733565b9150506040830151620007fd6040860182620007a4565b508091505092915050565b5f6020820190508181035f830152620008228184620007b5565b905092915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b62000876826200082e565b810181811067ffffffffffffffff821117156200089857620008976200083e565b5b80604052505050565b5f620008ac620005b6565b9050620008ba82826200086b565b919050565b5f67ffffffffffffffff821115620008dc57620008db6200083e565b5b602082029050602081019050919050565b5f80fd5b5f620009076200090184620008bf565b620008a1565b905080838252602082019050602084028301858111156200092d576200092c620008ed565b5b835b818110156200095a578062000945888262000612565b8452602084019350506020810190506200092f565b5050509392505050565b5f82601f8301126200097b576200097a6200082a565b5b81516200098d848260208601620008f1565b91505092915050565b5f60208284031215620009ae57620009ad620005bf565b5b5f82015167ffffffffffffffff811115620009ce57620009cd620005c3565b5b620009dc8482850162000964565b91505092915050565b620009f0816200079b565b8114620009fb575f80fd5b50565b5f8151905062000a0e81620009e5565b92915050565b5f6020828403121562000a2c5762000a2b620005bf565b5b5f62000a3b84828501620009fe565b9150509291505056fe";

type AccountQueryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountQueryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AccountQuery__factory extends ContractFactory {
  constructor(...args: AccountQueryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AccountQuery";
  }

  override deploy(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AccountQuery> {
    return super.deploy(account, overrides || {}) as Promise<AccountQuery>;
  }
  override getDeployTransaction(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(account, overrides || {});
  }
  override attach(address: string): AccountQuery {
    return super.attach(address) as AccountQuery;
  }
  override connect(signer: Signer): AccountQuery__factory {
    return super.connect(signer) as AccountQuery__factory;
  }
  static readonly contractName: "AccountQuery";

  public readonly contractName: "AccountQuery";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountQueryInterface {
    return new utils.Interface(_abi) as AccountQueryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AccountQuery {
    return new Contract(address, _abi, signerOrProvider) as AccountQuery;
  }
}
