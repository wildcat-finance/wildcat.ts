/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { VaultLens, VaultLensInterface } from "../VaultLens";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getAccountVaultInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "scaledBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "normalizedBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingApproval",
            type: "uint256",
          },
        ],
        internalType: "struct AccountVaultInfo",
        name: "info",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
    ],
    name: "getControlStatus",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "temporaryLiquidityCoverage",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "originalLiquidityCoverageRatio",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "temporaryLiquidityCoverageExpiry",
            type: "uint256",
          },
        ],
        internalType: "struct ControlStatus",
        name: "status",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getTokenInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "decimals",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isMock",
            type: "bool",
          },
        ],
        internalType: "struct TokenMetadata",
        name: "info",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
    ],
    name: "getVaultData",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "decimals",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isMock",
                type: "bool",
              },
            ],
            internalType: "struct TokenMetadata",
            name: "vaultToken",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "decimals",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isMock",
                type: "bool",
              },
            ],
            internalType: "struct TokenMetadata",
            name: "underlyingToken",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "borrower",
            type: "address",
          },
          {
            internalType: "address",
            name: "controller",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "interestFeeBips",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "penaltyFeeBips",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gracePeriod",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "annualInterestBips",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidityCoverageRatio",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "temporaryLiquidityCoverage",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "originalLiquidityCoverageRatio",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "temporaryLiquidityCoverageExpiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowableAssets",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxTotalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "scaledTotalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalAssets",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "coverageLiquidity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "scaleFactor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastAccruedProtocolFees",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isDelinquent",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "timeDelinquent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastInterestAccruedTimestamp",
            type: "uint256",
          },
        ],
        internalType: "struct VaultData",
        name: "data",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "vaults",
        type: "address[]",
      },
    ],
    name: "getVaultsMetadata",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "decimals",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isMock",
                type: "bool",
              },
            ],
            internalType: "struct TokenMetadata",
            name: "vaultToken",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "decimals",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isMock",
                type: "bool",
              },
            ],
            internalType: "struct TokenMetadata",
            name: "underlyingToken",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "borrower",
            type: "address",
          },
          {
            internalType: "address",
            name: "controller",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "interestFeeBips",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "penaltyFeeBips",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gracePeriod",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "annualInterestBips",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidityCoverageRatio",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "temporaryLiquidityCoverage",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "originalLiquidityCoverageRatio",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "temporaryLiquidityCoverageExpiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowableAssets",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxTotalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "scaledTotalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalAssets",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "coverageLiquidity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "scaleFactor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastAccruedProtocolFees",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isDelinquent",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "timeDelinquent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastInterestAccruedTimestamp",
            type: "uint256",
          },
        ],
        internalType: "struct VaultData[]",
        name: "data",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611c01806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631f69565f1461005c57806328b37b221461008c57806356360f71146100bc578063a0ff58f6146100ec578063a32698461461011c575b600080fd5b6100766004803603810190610071919061096f565b61014c565b6040516100839190610aec565b60405180910390f35b6100a660048036038101906100a1919061096f565b6101fc565b6040516100b39190610b50565b60405180910390f35b6100d660048036038101906100d1919061096f565b610299565b6040516100e39190610def565b60405180910390f35b61010660048036038101906101019190610e11565b610349565b6040516101139190610ea6565b60405180910390f35b61013660048036038101906101319190610f26565b6103e9565b604051610143919061123c565b60405180910390f35b610154610764565b600073ddcbbc4510156441f88d23a6ab4c64eed1775c1673ffffffffffffffffffffffffffffffffffffffff16631f69565f846040518263ffffffff1660e01b81526004016101a3919061126d565b600060405180830381865afa1580156101c0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101e991906114a4565b90506101f481610543565b915050919050565b6102046107ab565b73ddcbbc4510156441f88d23a6ab4c64eed1775c1673ffffffffffffffffffffffffffffffffffffffff166328b37b22836040518263ffffffff1660e01b8152600401610251919061126d565b606060405180830381865afa15801561026e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610292919061157d565b9050919050565b6102a16107ce565b600073ddcbbc4510156441f88d23a6ab4c64eed1775c1673ffffffffffffffffffffffffffffffffffffffff166356360f71846040518263ffffffff1660e01b81526004016102f0919061126d565b600060405180830381865afa15801561030d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610336919061180c565b9050610341816105d0565b915050919050565b6103516108d5565b73ddcbbc4510156441f88d23a6ab4c64eed1775c1673ffffffffffffffffffffffffffffffffffffffff1663a0ff58f684846040518363ffffffff1660e01b81526004016103a0929190611855565b608060405180830381865afa1580156103bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e191906118f6565b905092915050565b6060600073ddcbbc4510156441f88d23a6ab4c64eed1775c1673ffffffffffffffffffffffffffffffffffffffff1663a326984685856040518363ffffffff1660e01b815260040161043c9291906119d7565b600060405180830381865afa158015610459573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104829190611adc565b9050805167ffffffffffffffff81111561049f5761049e61128d565b5b6040519080825280602002602001820160405280156104d857816020015b6104c56107ce565b8152602001906001900390816104bd5790505b50915060005b815181101561053b5761050a8282815181106104fd576104fc611b25565b5b60200260200101516105d0565b83828151811061051d5761051c611b25565b5b6020026020010181905250808061053390611b83565b9150506104de565b505092915050565b61054b610764565b8160000151816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050816020015181602001819052508160400151816040018190525081606001518160600181815250506105bc826000015161073f565b816080019015159081151581525050919050565b6105d86107ce565b6040518061030001604052806105f18460000151610543565b81526020016106038460200151610543565b8152602001836040015173ffffffffffffffffffffffffffffffffffffffff168152602001836060015173ffffffffffffffffffffffffffffffffffffffff168152602001836080015173ffffffffffffffffffffffffffffffffffffffff1681526020018360a0015181526020018360c0015181526020018360e001518152602001836101000151815260200183610120015181526020018361014001511515815260200183610160015181526020018361018001518152602001836101a001518152602001836101c001518152602001836101e00151815260200183610200015181526020018361022001518152602001836102400151815260200183610260015181526020018361028001518152602001836102a0015115158152602001836102c001518152602001836102e001518152509050919050565b60006328ccaa29600052602060006004601c855afa6001600051148116915050919050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081526020016000151581525090565b604051806060016040528060001515815260200160008152602001600081525090565b6040518061030001604052806107e2610764565b81526020016107ef610764565b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061093c82610911565b9050919050565b61094c81610931565b811461095757600080fd5b50565b60008135905061096981610943565b92915050565b60006020828403121561098557610984610907565b5b60006109938482850161095a565b91505092915050565b6109a581610931565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109e55780820151818401526020810190506109ca565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a0d826109ab565b610a1781856109b6565b9350610a278185602086016109c7565b610a30816109f1565b840191505092915050565b6000819050919050565b610a4e81610a3b565b82525050565b60008115159050919050565b610a6981610a54565b82525050565b600060a083016000830151610a87600086018261099c565b5060208301518482036020860152610a9f8282610a02565b91505060408301518482036040860152610ab98282610a02565b9150506060830151610ace6060860182610a45565b506080830151610ae16080860182610a60565b508091505092915050565b60006020820190508181036000830152610b068184610a6f565b905092915050565b606082016000820151610b246000850182610a60565b506020820151610b376020850182610a45565b506040820151610b4a6040850182610a45565b50505050565b6000606082019050610b656000830184610b0e565b92915050565b600060a083016000830151610b83600086018261099c565b5060208301518482036020860152610b9b8282610a02565b91505060408301518482036040860152610bb58282610a02565b9150506060830151610bca6060860182610a45565b506080830151610bdd6080860182610a60565b508091505092915050565b6000610300830160008301518482036000860152610c068282610b6b565b91505060208301518482036020860152610c208282610b6b565b9150506040830151610c35604086018261099c565b506060830151610c48606086018261099c565b506080830151610c5b608086018261099c565b5060a0830151610c6e60a0860182610a45565b5060c0830151610c8160c0860182610a45565b5060e0830151610c9460e0860182610a45565b50610100830151610ca9610100860182610a45565b50610120830151610cbe610120860182610a45565b50610140830151610cd3610140860182610a60565b50610160830151610ce8610160860182610a45565b50610180830151610cfd610180860182610a45565b506101a0830151610d126101a0860182610a45565b506101c0830151610d276101c0860182610a45565b506101e0830151610d3c6101e0860182610a45565b50610200830151610d51610200860182610a45565b50610220830151610d66610220860182610a45565b50610240830151610d7b610240860182610a45565b50610260830151610d90610260860182610a45565b50610280830151610da5610280860182610a45565b506102a0830151610dba6102a0860182610a60565b506102c0830151610dcf6102c0860182610a45565b506102e0830151610de46102e0860182610a45565b508091505092915050565b60006020820190508181036000830152610e098184610be8565b905092915050565b60008060408385031215610e2857610e27610907565b5b6000610e368582860161095a565b9250506020610e478582860161095a565b9150509250929050565b608082016000820151610e676000850182610a45565b506020820151610e7a6020850182610a45565b506040820151610e8d6040850182610a45565b506060820151610ea06060850182610a45565b50505050565b6000608082019050610ebb6000830184610e51565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610ee657610ee5610ec1565b5b8235905067ffffffffffffffff811115610f0357610f02610ec6565b5b602083019150836020820283011115610f1f57610f1e610ecb565b5b9250929050565b60008060208385031215610f3d57610f3c610907565b5b600083013567ffffffffffffffff811115610f5b57610f5a61090c565b5b610f6785828601610ed0565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000610300830160008301518482036000860152610fbd8282610b6b565b91505060208301518482036020860152610fd78282610b6b565b9150506040830151610fec604086018261099c565b506060830151610fff606086018261099c565b506080830151611012608086018261099c565b5060a083015161102560a0860182610a45565b5060c083015161103860c0860182610a45565b5060e083015161104b60e0860182610a45565b50610100830151611060610100860182610a45565b50610120830151611075610120860182610a45565b5061014083015161108a610140860182610a60565b5061016083015161109f610160860182610a45565b506101808301516110b4610180860182610a45565b506101a08301516110c96101a0860182610a45565b506101c08301516110de6101c0860182610a45565b506101e08301516110f36101e0860182610a45565b50610200830151611108610200860182610a45565b5061022083015161111d610220860182610a45565b50610240830151611132610240860182610a45565b50610260830151611147610260860182610a45565b5061028083015161115c610280860182610a45565b506102a08301516111716102a0860182610a60565b506102c08301516111866102c0860182610a45565b506102e083015161119b6102e0860182610a45565b508091505092915050565b60006111b28383610f9f565b905092915050565b6000602082019050919050565b60006111d282610f73565b6111dc8185610f7e565b9350836020820285016111ee85610f8f565b8060005b8581101561122a578484038952815161120b85826111a6565b9450611216836111ba565b925060208a019950506001810190506111f2565b50829750879550505050505092915050565b6000602082019050818103600083015261125681846111c7565b905092915050565b61126781610931565b82525050565b6000602082019050611282600083018461125e565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112c5826109f1565b810181811067ffffffffffffffff821117156112e4576112e361128d565b5b80604052505050565b60006112f76108fd565b905061130382826112bc565b919050565b600080fd5b60008151905061131c81610943565b92915050565b600080fd5b600067ffffffffffffffff8211156113425761134161128d565b5b61134b826109f1565b9050602081019050919050565b600061136b61136684611327565b6112ed565b90508281526020810184848401111561138757611386611322565b5b6113928482856109c7565b509392505050565b600082601f8301126113af576113ae610ec1565b5b81516113bf848260208601611358565b91505092915050565b6113d181610a3b565b81146113dc57600080fd5b50565b6000815190506113ee816113c8565b92915050565b60006080828403121561140a57611409611288565b5b61141460806112ed565b905060006114248482850161130d565b600083015250602082015167ffffffffffffffff81111561144857611447611308565b5b6114548482850161139a565b602083015250604082015167ffffffffffffffff81111561147857611477611308565b5b6114848482850161139a565b6040830152506060611498848285016113df565b60608301525092915050565b6000602082840312156114ba576114b9610907565b5b600082015167ffffffffffffffff8111156114d8576114d761090c565b5b6114e4848285016113f4565b91505092915050565b6114f681610a54565b811461150157600080fd5b50565b600081519050611513816114ed565b92915050565b60006060828403121561152f5761152e611288565b5b61153960606112ed565b9050600061154984828501611504565b600083015250602061155d848285016113df565b6020830152506040611571848285016113df565b60408301525092915050565b60006060828403121561159357611592610907565b5b60006115a184828501611519565b91505092915050565b600061030082840312156115c1576115c0611288565b5b6115cc6103006112ed565b9050600082015167ffffffffffffffff8111156115ec576115eb611308565b5b6115f8848285016113f4565b600083015250602082015167ffffffffffffffff81111561161c5761161b611308565b5b611628848285016113f4565b602083015250604061163c8482850161130d565b60408301525060606116508482850161130d565b60608301525060806116648482850161130d565b60808301525060a0611678848285016113df565b60a08301525060c061168c848285016113df565b60c08301525060e06116a0848285016113df565b60e0830152506101006116b5848285016113df565b610100830152506101206116cb848285016113df565b610120830152506101406116e184828501611504565b610140830152506101606116f7848285016113df565b6101608301525061018061170d848285016113df565b610180830152506101a0611723848285016113df565b6101a0830152506101c0611739848285016113df565b6101c0830152506101e061174f848285016113df565b6101e083015250610200611765848285016113df565b6102008301525061022061177b848285016113df565b61022083015250610240611791848285016113df565b610240830152506102606117a7848285016113df565b610260830152506102806117bd848285016113df565b610280830152506102a06117d384828501611504565b6102a0830152506102c06117e9848285016113df565b6102c0830152506102e06117ff848285016113df565b6102e08301525092915050565b60006020828403121561182257611821610907565b5b600082015167ffffffffffffffff8111156118405761183f61090c565b5b61184c848285016115aa565b91505092915050565b600060408201905061186a600083018561125e565b611877602083018461125e565b9392505050565b60006080828403121561189457611893611288565b5b61189e60806112ed565b905060006118ae848285016113df565b60008301525060206118c2848285016113df565b60208301525060406118d6848285016113df565b60408301525060606118ea848285016113df565b60608301525092915050565b60006080828403121561190c5761190b610907565b5b600061191a8482850161187e565b91505092915050565b600082825260208201905092915050565b6000819050919050565b600061194a838361099c565b60208301905092915050565b6000611965602084018461095a565b905092915050565b6000602082019050919050565b60006119868385611923565b935061199182611934565b8060005b858110156119ca576119a78284611956565b6119b1888261193e565b97506119bc8361196d565b925050600181019050611995565b5085925050509392505050565b600060208201905081810360008301526119f281848661197a565b90509392505050565b600067ffffffffffffffff821115611a1657611a1561128d565b5b602082029050602081019050919050565b6000611a3a611a35846119fb565b6112ed565b90508083825260208201905060208402830185811115611a5d57611a5c610ecb565b5b835b81811015611aa457805167ffffffffffffffff811115611a8257611a81610ec1565b5b808601611a8f89826115aa565b85526020850194505050602081019050611a5f565b5050509392505050565b600082601f830112611ac357611ac2610ec1565b5b8151611ad3848260208601611a27565b91505092915050565b600060208284031215611af257611af1610907565b5b600082015167ffffffffffffffff811115611b1057611b0f61090c565b5b611b1c84828501611aae565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b8e82610a3b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611bc057611bbf611b54565b5b60018201905091905056fea264697066735822122043f03f4062b6a5458d8cc1458efde53c0f6cdc30318825bd9c4657f8c80cc36b64736f6c63430008110033";

type VaultLensConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultLensConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VaultLens__factory extends ContractFactory {
  constructor(...args: VaultLensConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VaultLens> {
    return super.deploy(overrides || {}) as Promise<VaultLens>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): VaultLens {
    return super.attach(address) as VaultLens;
  }
  override connect(signer: Signer): VaultLens__factory {
    return super.connect(signer) as VaultLens__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultLensInterface {
    return new utils.Interface(_abi) as VaultLensInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VaultLens {
    return new Contract(address, _abi, signerOrProvider) as VaultLens;
  }
}
