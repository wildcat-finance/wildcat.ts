/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type MarketParametersStruct = {
  asset: PromiseOrValue<string>;
  namePrefix: PromiseOrValue<string>;
  symbolPrefix: PromiseOrValue<string>;
  borrower: PromiseOrValue<string>;
  controller: PromiseOrValue<string>;
  feeRecipient: PromiseOrValue<string>;
  sentinel: PromiseOrValue<string>;
  maxTotalSupply: PromiseOrValue<BigNumberish>;
  protocolFeeBips: PromiseOrValue<BigNumberish>;
  annualInterestBips: PromiseOrValue<BigNumberish>;
  delinquencyFeeBips: PromiseOrValue<BigNumberish>;
  withdrawalBatchDuration: PromiseOrValue<BigNumberish>;
  reserveRatioBips: PromiseOrValue<BigNumberish>;
  delinquencyGracePeriod: PromiseOrValue<BigNumberish>;
};

export type MarketParametersStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  number
] & {
  asset: string;
  namePrefix: string;
  symbolPrefix: string;
  borrower: string;
  controller: string;
  feeRecipient: string;
  sentinel: string;
  maxTotalSupply: BigNumber;
  protocolFeeBips: number;
  annualInterestBips: number;
  delinquencyFeeBips: number;
  withdrawalBatchDuration: number;
  reserveRatioBips: number;
  delinquencyGracePeriod: number;
};

export type MarketParameterConstraintsStruct = {
  minimumDelinquencyGracePeriod: PromiseOrValue<BigNumberish>;
  maximumDelinquencyGracePeriod: PromiseOrValue<BigNumberish>;
  minimumReserveRatioBips: PromiseOrValue<BigNumberish>;
  maximumReserveRatioBips: PromiseOrValue<BigNumberish>;
  minimumDelinquencyFeeBips: PromiseOrValue<BigNumberish>;
  maximumDelinquencyFeeBips: PromiseOrValue<BigNumberish>;
  minimumWithdrawalBatchDuration: PromiseOrValue<BigNumberish>;
  maximumWithdrawalBatchDuration: PromiseOrValue<BigNumberish>;
  minimumAnnualInterestBips: PromiseOrValue<BigNumberish>;
  maximumAnnualInterestBips: PromiseOrValue<BigNumberish>;
};

export type MarketParameterConstraintsStructOutput = [
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number
] & {
  minimumDelinquencyGracePeriod: number;
  maximumDelinquencyGracePeriod: number;
  minimumReserveRatioBips: number;
  maximumReserveRatioBips: number;
  minimumDelinquencyFeeBips: number;
  maximumDelinquencyFeeBips: number;
  minimumWithdrawalBatchDuration: number;
  maximumWithdrawalBatchDuration: number;
  minimumAnnualInterestBips: number;
  maximumAnnualInterestBips: number;
};

export interface WildcatMarketControllerInterface extends utils.Interface {
  functions: {
    "archController()": FunctionFragment;
    "authorizeLenders(address[])": FunctionFragment;
    "borrower()": FunctionFragment;
    "closeMarket(address)": FunctionFragment;
    "computeMarketAddress(address,string,string)": FunctionFragment;
    "controllerFactory()": FunctionFragment;
    "deauthorizeLenders(address[])": FunctionFragment;
    "deployMarket(address,string,string,uint128,uint16,uint16,uint32,uint16,uint32)": FunctionFragment;
    "getAuthorizedLenders()": FunctionFragment;
    "getAuthorizedLenders(uint256,uint256)": FunctionFragment;
    "getAuthorizedLendersCount()": FunctionFragment;
    "getControlledMarkets(uint256,uint256)": FunctionFragment;
    "getControlledMarkets()": FunctionFragment;
    "getControlledMarketsCount()": FunctionFragment;
    "getMarketParameters()": FunctionFragment;
    "getParameterConstraints()": FunctionFragment;
    "getProtocolFeeConfiguration()": FunctionFragment;
    "isAuthorizedLender(address)": FunctionFragment;
    "isControlledMarket(address)": FunctionFragment;
    "marketInitCodeHash()": FunctionFragment;
    "marketInitCodeStorage()": FunctionFragment;
    "resetReserveRatio(address)": FunctionFragment;
    "sentinel()": FunctionFragment;
    "setAnnualInterestBips(address,uint16)": FunctionFragment;
    "setMaxTotalSupply(address,uint256)": FunctionFragment;
    "temporaryExcessReserveRatio(address)": FunctionFragment;
    "updateLenderAuthorization(address,address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "archController"
      | "authorizeLenders"
      | "borrower"
      | "closeMarket"
      | "computeMarketAddress"
      | "controllerFactory"
      | "deauthorizeLenders"
      | "deployMarket"
      | "getAuthorizedLenders()"
      | "getAuthorizedLenders(uint256,uint256)"
      | "getAuthorizedLendersCount"
      | "getControlledMarkets(uint256,uint256)"
      | "getControlledMarkets()"
      | "getControlledMarketsCount"
      | "getMarketParameters"
      | "getParameterConstraints"
      | "getProtocolFeeConfiguration"
      | "isAuthorizedLender"
      | "isControlledMarket"
      | "marketInitCodeHash"
      | "marketInitCodeStorage"
      | "resetReserveRatio"
      | "sentinel"
      | "setAnnualInterestBips"
      | "setMaxTotalSupply"
      | "temporaryExcessReserveRatio"
      | "updateLenderAuthorization"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "archController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeLenders",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "borrower", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closeMarket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeMarketAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorizeLenders",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deployMarket",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedLenders()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedLenders(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedLendersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getControlledMarkets(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getControlledMarkets()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getControlledMarketsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParameterConstraints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeeConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedLender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isControlledMarket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketInitCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketInitCodeStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetReserveRatio",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "sentinel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAnnualInterestBips",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalSupply",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "temporaryExcessReserveRatio",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLenderAuthorization",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "archController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeLenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeMarketAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorizeLenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedLenders()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedLenders(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedLendersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getControlledMarkets(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getControlledMarkets()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getControlledMarketsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParameterConstraints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeeConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isControlledMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketInitCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketInitCodeStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetReserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sentinel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAnnualInterestBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "temporaryExcessReserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLenderAuthorization",
    data: BytesLike
  ): Result;

  events: {
    "LenderAuthorized(address)": EventFragment;
    "LenderDeauthorized(address)": EventFragment;
    "MarketDeployed(address,string,string,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "TemporaryExcessReserveRatioActivated(address,uint256,uint256,uint256)": EventFragment;
    "TemporaryExcessReserveRatioExpired(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LenderAuthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LenderDeauthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketDeployed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TemporaryExcessReserveRatioActivated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TemporaryExcessReserveRatioExpired"
  ): EventFragment;
}

export interface LenderAuthorizedEventObject {
  arg0: string;
}
export type LenderAuthorizedEvent = TypedEvent<
  [string],
  LenderAuthorizedEventObject
>;

export type LenderAuthorizedEventFilter =
  TypedEventFilter<LenderAuthorizedEvent>;

export interface LenderDeauthorizedEventObject {
  arg0: string;
}
export type LenderDeauthorizedEvent = TypedEvent<
  [string],
  LenderDeauthorizedEventObject
>;

export type LenderDeauthorizedEventFilter =
  TypedEventFilter<LenderDeauthorizedEvent>;

export interface MarketDeployedEventObject {
  market: string;
  name: string;
  symbol: string;
  asset: string;
  maxTotalSupply: BigNumber;
  annualInterestBips: BigNumber;
  delinquencyFeeBips: BigNumber;
  withdrawalBatchDuration: BigNumber;
  reserveRatioBips: BigNumber;
  delinquencyGracePeriod: BigNumber;
}
export type MarketDeployedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  MarketDeployedEventObject
>;

export type MarketDeployedEventFilter = TypedEventFilter<MarketDeployedEvent>;

export interface TemporaryExcessReserveRatioActivatedEventObject {
  market: string;
  originalReserveRatioBips: BigNumber;
  temporaryReserveRatioBips: BigNumber;
  temporaryReserveRatioExpiry: BigNumber;
}
export type TemporaryExcessReserveRatioActivatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  TemporaryExcessReserveRatioActivatedEventObject
>;

export type TemporaryExcessReserveRatioActivatedEventFilter =
  TypedEventFilter<TemporaryExcessReserveRatioActivatedEvent>;

export interface TemporaryExcessReserveRatioExpiredEventObject {
  market: string;
}
export type TemporaryExcessReserveRatioExpiredEvent = TypedEvent<
  [string],
  TemporaryExcessReserveRatioExpiredEventObject
>;

export type TemporaryExcessReserveRatioExpiredEventFilter =
  TypedEventFilter<TemporaryExcessReserveRatioExpiredEvent>;

export interface WildcatMarketController extends BaseContract {
  contractName: "WildcatMarketController";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WildcatMarketControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    archController(overrides?: CallOverrides): Promise<[string]>;

    authorizeLenders(
      lenders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrower(overrides?: CallOverrides): Promise<[string]>;

    closeMarket(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    computeMarketAddress(
      asset: PromiseOrValue<string>,
      namePrefix: PromiseOrValue<string>,
      symbolPrefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    controllerFactory(overrides?: CallOverrides): Promise<[string]>;

    deauthorizeLenders(
      lenders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployMarket(
      asset: PromiseOrValue<string>,
      namePrefix: PromiseOrValue<string>,
      symbolPrefix: PromiseOrValue<string>,
      maxTotalSupply: PromiseOrValue<BigNumberish>,
      annualInterestBips: PromiseOrValue<BigNumberish>,
      delinquencyFeeBips: PromiseOrValue<BigNumberish>,
      withdrawalBatchDuration: PromiseOrValue<BigNumberish>,
      reserveRatioBips: PromiseOrValue<BigNumberish>,
      delinquencyGracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "getAuthorizedLenders()"(overrides?: CallOverrides): Promise<[string[]]>;

    "getAuthorizedLenders(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getAuthorizedLendersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getControlledMarkets(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { arr: string[] }>;

    "getControlledMarkets()"(overrides?: CallOverrides): Promise<[string[]]>;

    getControlledMarketsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarketParameters(
      overrides?: CallOverrides
    ): Promise<[MarketParametersStructOutput]>;

    getParameterConstraints(
      overrides?: CallOverrides
    ): Promise<
      [MarketParameterConstraintsStructOutput] & {
        constraints: MarketParameterConstraintsStructOutput;
      }
    >;

    getProtocolFeeConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number] & {
        feeRecipient: string;
        originationFeeAsset: string;
        originationFeeAmount: BigNumber;
        protocolFeeBips: number;
      }
    >;

    isAuthorizedLender(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isControlledMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marketInitCodeHash(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketInitCodeStorage(overrides?: CallOverrides): Promise<[string]>;

    resetReserveRatio(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sentinel(overrides?: CallOverrides): Promise<[string]>;

    setAnnualInterestBips(
      market: PromiseOrValue<string>,
      annualInterestBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxTotalSupply(
      market: PromiseOrValue<string>,
      maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    temporaryExcessReserveRatio(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        reserveRatioBips: BigNumber;
        expiry: BigNumber;
      }
    >;

    updateLenderAuthorization(
      lender: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  archController(overrides?: CallOverrides): Promise<string>;

  authorizeLenders(
    lenders: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrower(overrides?: CallOverrides): Promise<string>;

  closeMarket(
    market: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  computeMarketAddress(
    asset: PromiseOrValue<string>,
    namePrefix: PromiseOrValue<string>,
    symbolPrefix: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  controllerFactory(overrides?: CallOverrides): Promise<string>;

  deauthorizeLenders(
    lenders: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployMarket(
    asset: PromiseOrValue<string>,
    namePrefix: PromiseOrValue<string>,
    symbolPrefix: PromiseOrValue<string>,
    maxTotalSupply: PromiseOrValue<BigNumberish>,
    annualInterestBips: PromiseOrValue<BigNumberish>,
    delinquencyFeeBips: PromiseOrValue<BigNumberish>,
    withdrawalBatchDuration: PromiseOrValue<BigNumberish>,
    reserveRatioBips: PromiseOrValue<BigNumberish>,
    delinquencyGracePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "getAuthorizedLenders()"(overrides?: CallOverrides): Promise<string[]>;

  "getAuthorizedLenders(uint256,uint256)"(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAuthorizedLendersCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getControlledMarkets(uint256,uint256)"(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getControlledMarkets()"(overrides?: CallOverrides): Promise<string[]>;

  getControlledMarketsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getMarketParameters(
    overrides?: CallOverrides
  ): Promise<MarketParametersStructOutput>;

  getParameterConstraints(
    overrides?: CallOverrides
  ): Promise<MarketParameterConstraintsStructOutput>;

  getProtocolFeeConfiguration(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, number] & {
      feeRecipient: string;
      originationFeeAsset: string;
      originationFeeAmount: BigNumber;
      protocolFeeBips: number;
    }
  >;

  isAuthorizedLender(
    lender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isControlledMarket(
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marketInitCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

  marketInitCodeStorage(overrides?: CallOverrides): Promise<string>;

  resetReserveRatio(
    market: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sentinel(overrides?: CallOverrides): Promise<string>;

  setAnnualInterestBips(
    market: PromiseOrValue<string>,
    annualInterestBips: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxTotalSupply(
    market: PromiseOrValue<string>,
    maxTotalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  temporaryExcessReserveRatio(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { reserveRatioBips: BigNumber; expiry: BigNumber }
  >;

  updateLenderAuthorization(
    lender: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    archController(overrides?: CallOverrides): Promise<string>;

    authorizeLenders(
      lenders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    borrower(overrides?: CallOverrides): Promise<string>;

    closeMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    computeMarketAddress(
      asset: PromiseOrValue<string>,
      namePrefix: PromiseOrValue<string>,
      symbolPrefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    controllerFactory(overrides?: CallOverrides): Promise<string>;

    deauthorizeLenders(
      lenders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    deployMarket(
      asset: PromiseOrValue<string>,
      namePrefix: PromiseOrValue<string>,
      symbolPrefix: PromiseOrValue<string>,
      maxTotalSupply: PromiseOrValue<BigNumberish>,
      annualInterestBips: PromiseOrValue<BigNumberish>,
      delinquencyFeeBips: PromiseOrValue<BigNumberish>,
      withdrawalBatchDuration: PromiseOrValue<BigNumberish>,
      reserveRatioBips: PromiseOrValue<BigNumberish>,
      delinquencyGracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAuthorizedLenders()"(overrides?: CallOverrides): Promise<string[]>;

    "getAuthorizedLenders(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAuthorizedLendersCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getControlledMarkets(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getControlledMarkets()"(overrides?: CallOverrides): Promise<string[]>;

    getControlledMarketsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketParameters(
      overrides?: CallOverrides
    ): Promise<MarketParametersStructOutput>;

    getParameterConstraints(
      overrides?: CallOverrides
    ): Promise<MarketParameterConstraintsStructOutput>;

    getProtocolFeeConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number] & {
        feeRecipient: string;
        originationFeeAsset: string;
        originationFeeAmount: BigNumber;
        protocolFeeBips: number;
      }
    >;

    isAuthorizedLender(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isControlledMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketInitCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    marketInitCodeStorage(overrides?: CallOverrides): Promise<string>;

    resetReserveRatio(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sentinel(overrides?: CallOverrides): Promise<string>;

    setAnnualInterestBips(
      market: PromiseOrValue<string>,
      annualInterestBips: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTotalSupply(
      market: PromiseOrValue<string>,
      maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    temporaryExcessReserveRatio(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        reserveRatioBips: BigNumber;
        expiry: BigNumber;
      }
    >;

    updateLenderAuthorization(
      lender: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LenderAuthorized(address)"(arg0?: null): LenderAuthorizedEventFilter;
    LenderAuthorized(arg0?: null): LenderAuthorizedEventFilter;

    "LenderDeauthorized(address)"(arg0?: null): LenderDeauthorizedEventFilter;
    LenderDeauthorized(arg0?: null): LenderDeauthorizedEventFilter;

    "MarketDeployed(address,string,string,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      market?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      asset?: null,
      maxTotalSupply?: null,
      annualInterestBips?: null,
      delinquencyFeeBips?: null,
      withdrawalBatchDuration?: null,
      reserveRatioBips?: null,
      delinquencyGracePeriod?: null
    ): MarketDeployedEventFilter;
    MarketDeployed(
      market?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      asset?: null,
      maxTotalSupply?: null,
      annualInterestBips?: null,
      delinquencyFeeBips?: null,
      withdrawalBatchDuration?: null,
      reserveRatioBips?: null,
      delinquencyGracePeriod?: null
    ): MarketDeployedEventFilter;

    "TemporaryExcessReserveRatioActivated(address,uint256,uint256,uint256)"(
      market?: PromiseOrValue<string> | null,
      originalReserveRatioBips?: null,
      temporaryReserveRatioBips?: null,
      temporaryReserveRatioExpiry?: null
    ): TemporaryExcessReserveRatioActivatedEventFilter;
    TemporaryExcessReserveRatioActivated(
      market?: PromiseOrValue<string> | null,
      originalReserveRatioBips?: null,
      temporaryReserveRatioBips?: null,
      temporaryReserveRatioExpiry?: null
    ): TemporaryExcessReserveRatioActivatedEventFilter;

    "TemporaryExcessReserveRatioExpired(address)"(
      market?: PromiseOrValue<string> | null
    ): TemporaryExcessReserveRatioExpiredEventFilter;
    TemporaryExcessReserveRatioExpired(
      market?: PromiseOrValue<string> | null
    ): TemporaryExcessReserveRatioExpiredEventFilter;
  };

  estimateGas: {
    archController(overrides?: CallOverrides): Promise<BigNumber>;

    authorizeLenders(
      lenders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<BigNumber>;

    closeMarket(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    computeMarketAddress(
      asset: PromiseOrValue<string>,
      namePrefix: PromiseOrValue<string>,
      symbolPrefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controllerFactory(overrides?: CallOverrides): Promise<BigNumber>;

    deauthorizeLenders(
      lenders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployMarket(
      asset: PromiseOrValue<string>,
      namePrefix: PromiseOrValue<string>,
      symbolPrefix: PromiseOrValue<string>,
      maxTotalSupply: PromiseOrValue<BigNumberish>,
      annualInterestBips: PromiseOrValue<BigNumberish>,
      delinquencyFeeBips: PromiseOrValue<BigNumberish>,
      withdrawalBatchDuration: PromiseOrValue<BigNumberish>,
      reserveRatioBips: PromiseOrValue<BigNumberish>,
      delinquencyGracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "getAuthorizedLenders()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getAuthorizedLenders(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorizedLendersCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getControlledMarkets(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getControlledMarkets()"(overrides?: CallOverrides): Promise<BigNumber>;

    getControlledMarketsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketParameters(overrides?: CallOverrides): Promise<BigNumber>;

    getParameterConstraints(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolFeeConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    isAuthorizedLender(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isControlledMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketInitCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    marketInitCodeStorage(overrides?: CallOverrides): Promise<BigNumber>;

    resetReserveRatio(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sentinel(overrides?: CallOverrides): Promise<BigNumber>;

    setAnnualInterestBips(
      market: PromiseOrValue<string>,
      annualInterestBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxTotalSupply(
      market: PromiseOrValue<string>,
      maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    temporaryExcessReserveRatio(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateLenderAuthorization(
      lender: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    archController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorizeLenders(
      lenders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeMarket(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    computeMarketAddress(
      asset: PromiseOrValue<string>,
      namePrefix: PromiseOrValue<string>,
      symbolPrefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controllerFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deauthorizeLenders(
      lenders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployMarket(
      asset: PromiseOrValue<string>,
      namePrefix: PromiseOrValue<string>,
      symbolPrefix: PromiseOrValue<string>,
      maxTotalSupply: PromiseOrValue<BigNumberish>,
      annualInterestBips: PromiseOrValue<BigNumberish>,
      delinquencyFeeBips: PromiseOrValue<BigNumberish>,
      withdrawalBatchDuration: PromiseOrValue<BigNumberish>,
      reserveRatioBips: PromiseOrValue<BigNumberish>,
      delinquencyGracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "getAuthorizedLenders()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAuthorizedLenders(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorizedLendersCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getControlledMarkets(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getControlledMarkets()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getControlledMarketsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParameterConstraints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolFeeConfiguration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorizedLender(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isControlledMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketInitCodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketInitCodeStorage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resetReserveRatio(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sentinel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAnnualInterestBips(
      market: PromiseOrValue<string>,
      annualInterestBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTotalSupply(
      market: PromiseOrValue<string>,
      maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    temporaryExcessReserveRatio(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateLenderAuthorization(
      lender: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
