# import './fragments.graphql'

# -------------------------------------------------------------------------- #
#                                Lender Views                                #
# -------------------------------------------------------------------------- #

query getLenderAccountForMarket(
  $market: ID!
  $lender: Bytes!
  $numDeposits: Int = 200
  $skipDeposits: Int = 0
  $orderDeposits: Deposit_orderBy = blockTimestamp
  $directionDeposits: OrderDirection = desc
) {
  market(id: $market) {
    lenders(where: { address: $lender }) {
      ...AccountDataForLenderView
    }
  }
}

query getLenderAccountWithMarket(
  $market: ID!
  $lender: Bytes!
  $numDeposits: Int = 200
  $skipDeposits: Int = 0
  $orderDeposits: Deposit_orderBy = blockTimestamp
  $directionDeposits: OrderDirection = desc
  # borrowRecords
  $numBorrows: Int = 10
  $skipBorrows: Int = 0
  $orderBorrows: Borrow_orderBy = blockTimestamp
  $directionBorrows: OrderDirection = desc
  # repaymentRecords
  $numRepayments: Int = 10
  $skipRepayments: Int = 0
  $orderRepayments: DebtRepaid_orderBy = blockTimestamp
  $directionRepayments: OrderDirection = desc
) {
  market(id: $market) {
    lenders(where: { address: $lender }) {
      ...AccountDataForLenderView
    }
    ...MarketData
    borrowRecords(
      first: $numBorrows
      skip: $skipBorrows
      orderBy: $orderBorrows
      orderDirection: $directionBorrows
    ) {
      ...BorrowData
    }
    repaymentRecords(
      first: $numRepayments
      skip: $skipRepayments
      orderBy: $orderRepayments
      orderDirection: $directionRepayments
    ) {
      ...RepaymentData
    }
  }
}

query getAllMarketsForLenderView(
  $lender: Bytes
  # deposits
  $numDeposits: Int = 200
  $skipDeposits: Int = 0
  $orderDeposits: Deposit_orderBy = blockTimestamp
  $directionDeposits: OrderDirection = desc
  # borrowRecords
  $numBorrows: Int = 10
  $skipBorrows: Int = 0
  $orderBorrows: Borrow_orderBy = blockTimestamp
  $directionBorrows: OrderDirection = desc
  # repaymentRecords
  $numRepayments: Int = 10
  $skipRepayments: Int = 0
  $orderRepayments: DebtRepaid_orderBy = blockTimestamp
  $directionRepayments: OrderDirection = desc
) {
  markets {
    ...MarketData
    borrowRecords(
      first: $numBorrows
      skip: $skipBorrows
      orderBy: $orderBorrows
      orderDirection: $directionBorrows
    ) {
      ...BorrowData
    }
    repaymentRecords(
      first: $numRepayments
      skip: $skipRepayments
      orderBy: $orderRepayments
      orderDirection: $directionRepayments
    ) {
      ...RepaymentData
    }
  }
  lenderAccounts(
    where: {
      and: [
        { address: $lender }
        {
          or: [
            { role_in: [DepositAndWithdraw, WithdrawOnly] }
            { scaledBalance_gt: 0 }
            { controllerAuthorization_: { authorized: true } }
            { totalDeposited_gt: 0 }
          ]
        }
      ]
    }
  ) {
    ...AccountDataForLenderView
    market {
      id
    }
  }
  controllerAuthorizations: lenderAuthorizations(
    where: { and: [{ lender: $lender }, { authorized: true }] }
  ) {
    lender
    authorized
    controller {
      markets {
        id
      }
    }
  }
}

query getAccountsWhereLenderAuthorizedOrActive(
  $lender: Bytes!
  # deposits
  $numDeposits: Int = 200
  $skipDeposits: Int = 0
  $orderDeposits: Deposit_orderBy = blockTimestamp
  $directionDeposits: OrderDirection = desc
  # borrowRecords
  $numBorrows: Int = 10
  $skipBorrows: Int = 0
  $orderBorrows: Borrow_orderBy = blockTimestamp
  $directionBorrows: OrderDirection = desc
  # repaymentRecords
  $numRepayments: Int = 10
  $skipRepayments: Int = 0
  $orderRepayments: DebtRepaid_orderBy = blockTimestamp
  $directionRepayments: OrderDirection = desc
) {
  lenderAccounts(
    where: {
      and: [
        { address: $lender }
        {
          or: [
            { role_in: [DepositAndWithdraw, WithdrawOnly] }
            { scaledBalance_gt: 0 }
            { controllerAuthorization_: { authorized: true } }
            { totalDeposited_gt: 0 }
          ]
        }
      ]
    }
  ) {
    ...AccountDataForLenderView
    market {
      ...MarketData
      borrowRecords(
        first: $numBorrows
        skip: $skipBorrows
        orderBy: $orderBorrows
        orderDirection: $directionBorrows
      ) {
        ...BorrowData
      }
      repaymentRecords(
        first: $numRepayments
        skip: $skipRepayments
        orderBy: $orderRepayments
        orderDirection: $directionRepayments
      ) {
        ...RepaymentData
      }
    }
  }
  controllerAuthorizations: lenderAuthorizations(
    where: { and: [{ lender: $lender }, { authorized: true }] }
  ) {
    lender
    authorized
    controller {
      markets {
        ...MarketData
        borrowRecords(
          first: $numBorrows
          skip: $skipBorrows
          orderBy: $orderBorrows
          orderDirection: $directionBorrows
        ) {
          ...BorrowData
        }
        repaymentRecords(
          first: $numRepayments
          skip: $skipRepayments
          orderBy: $orderRepayments
          orderDirection: $directionRepayments
        ) {
          ...RepaymentData
        }
      }
    }
  }
}

query getLenderWithdrawalsForMarket(
  $market: ID!
  $lender: Bytes!
  $numWithdrawals: Int = 200
  $skipWithdrawals: Int = 0
) {
  market(id: $market) {
    lenders(where: { address: $lender }) {
      incompleteWithdrawals: withdrawals(
        first: $numWithdrawals
        skip: $skipWithdrawals
        where: { isCompleted: false }
      ) {
        ...LenderWithdrawalPropertiesWithEvents
      }

      completeWithdrawals: withdrawals(
        first: $numWithdrawals
        skip: $skipWithdrawals
        where: { isCompleted: true }
      ) {
        ...LenderWithdrawalPropertiesWithEvents
      }
    }
  }
}

query getLenderAuthorizationByMarket($market: ID!, $lender: Bytes!) {
  market(id: $market) {
    controller {
      authorizedLenders(where: { lender: $lender }) {
        lender
        authorized
      }
    }
  }
}

# Get market address and lender interaction logs for markets
# where lender is authorized on controller, has a role or has
# a balance.
query getMarketsAndLogsWhereLenderAuthorizedOrActive(
  $lender: Bytes!
  $minimumBalance: BigInt = 1
  # deposits
  $numDeposits: Int = 200
  $skipDeposits: Int = 0
  $orderDeposits: Deposit_orderBy = blockTimestamp
  $directionDeposits: OrderDirection = desc
  # withdrawals
  $numWithdrawals: Int = 200
  $skipWithdrawals: Int = 0 # $orderWithdrawals: LenderWithdrawalStatus_orderBy = batch__expiry # $directionWithdrawals: OrderDirection = desc
) {
  lenderAccounts(
    where: {
      address: $lender
      or: [
        { role_in: [DepositAndWithdraw, WithdrawOnly] }
        { scaledBalance_gt: $minimumBalance }
        { controllerAuthorization_: { authorized: true } }
      ]
    }
  ) {
    market {
      id
    }
    scaledBalance
    role
    totalDeposited
    lastScaleFactor
    totalInterestEarned
    controllerAuthorization {
      authorized
    }
    withdrawals(
      first: $numWithdrawals
      skip: $skipWithdrawals
      where: { isCompleted: false } # orderBy: $orderWithdrawals # orderDirection: $directionWithdrawals
    ) {
      ...LenderWithdrawalProperties

      batch {
        ...WithdrawalBatchProperties
      }
      requests {
        ...WithdrawalRequestProperties
      }
      executions {
        ...WithdrawalExecutionProperties
      }
    }

    deposits(
      first: $numDeposits
      skip: $skipDeposits
      orderBy: $orderDeposits
      orderDirection: $directionDeposits
    ) {
      ...DepositData
    }
  }
}

query getMarketEvents(
  $market: ID!
  $startEventIndex: Int = 0
  $endEventIndex: Int = 100000000
  $limit: Int = 10
) {
  market(id: $market) {
    marketClosedEvent {
      ...MarketClosedData
    }
    delinquencyRecords(
      where: { eventIndex_gte: $startEventIndex, eventIndex_lt: $endEventIndex }
      orderBy: eventIndex
      orderDirection: desc
      first: $limit
    ) {
      ...DelinquencyStatusChangedData
    }
    borrowRecords(
      where: { eventIndex_gte: $startEventIndex, eventIndex_lt: $endEventIndex }
      orderBy: eventIndex
      orderDirection: desc
      first: $limit
    ) {
      ...BorrowData
    }
    depositRecords(
      where: { eventIndex_gte: $startEventIndex, eventIndex_lt: $endEventIndex }
      orderBy: eventIndex
      orderDirection: desc
      first: $limit
    ) {
      ...DepositData
    }
    feeCollectionRecords(
      where: { eventIndex_gte: $startEventIndex, eventIndex_lt: $endEventIndex }
      orderBy: eventIndex
      orderDirection: desc
      first: $limit
    ) {
      ...FeesCollectedData
    }
    repaymentRecords(
      where: { eventIndex_gte: $startEventIndex, eventIndex_lt: $endEventIndex }
      orderBy: eventIndex
      orderDirection: desc
      first: $limit
    ) {
      ...RepaymentData
    }
    annualInterestBipsUpdatedRecords(
      where: { eventIndex_gte: $startEventIndex, eventIndex_lt: $endEventIndex }
      orderBy: eventIndex
      orderDirection: desc
      first: $limit
    ) {
      ...AnnualInterestBipsUpdatedData
    }
    maxTotalSupplyUpdatedRecords(
      where: { eventIndex_gte: $startEventIndex, eventIndex_lt: $endEventIndex }
      orderBy: eventIndex
      orderDirection: desc
      first: $limit
    ) {
      ...MaxTotalSupplyUpdatedData
    }
    withdrawalRequestRecords(
      where: { eventIndex_gte: $startEventIndex, eventIndex_lt: $endEventIndex }
      orderBy: eventIndex
      orderDirection: desc
      first: $limit
    ) {
      ...WithdrawalRequestProperties
    }
  }
}

# ---------------------------------------------------------------------------- #
#                                Borrower Views                                #
# ---------------------------------------------------------------------------- #

query getMarketsForBorrower(
  $borrower: Bytes!
  # markets - default order is newest first
  $numMarkets: Int = 1000
  $skipMarkets: Int = 0
  $orderMarkets: Market_orderBy = createdAt
  $directionMarkets: OrderDirection = desc
  # deposits
  $numDeposits: Int = 10
  $skipDeposits: Int = 0
  $orderDeposits: Deposit_orderBy = blockTimestamp
  $directionDeposits: OrderDirection = desc
  # borrowRecords
  $numBorrows: Int = 10
  $skipBorrows: Int = 0
  $orderBorrows: Borrow_orderBy = blockTimestamp
  $directionBorrows: OrderDirection = desc
  # feeCollections
  $numFeeCollections: Int = 10
  $skipFeeCollections: Int = 0
  $orderFeeCollections: FeesCollected_orderBy = blockTimestamp
  $directionFeeCollections: OrderDirection = desc
  # repaymentRecords
  $numRepayments: Int = 10
  $skipRepayments: Int = 0
  $orderRepayments: DebtRepaid_orderBy = blockTimestamp
  $directionRepayments: OrderDirection = desc
) {
  controllers(where: { borrower: $borrower }) {
    markets(
      orderBy: $orderMarkets
      orderDirection: $directionMarkets
      first: $numMarkets
      skip: $skipMarkets
    ) {
      ...MarketDataWithEvents
    }
  }
}

query getMarketsForAllBorrowers(
  # markets - default order is newest first
  $numMarkets: Int = 1000
  $skipMarkets: Int = 0
  $orderMarkets: Market_orderBy = createdAt
  $directionMarkets: OrderDirection = desc
  # deposits
  $numDeposits: Int = 10
  $skipDeposits: Int = 0
  $orderDeposits: Deposit_orderBy = blockTimestamp
  $directionDeposits: OrderDirection = desc
  # borrowRecords
  $numBorrows: Int = 10
  $skipBorrows: Int = 0
  $orderBorrows: Borrow_orderBy = blockTimestamp
  $directionBorrows: OrderDirection = desc
  # feeCollections
  $numFeeCollections: Int = 10
  $skipFeeCollections: Int = 0
  $orderFeeCollections: FeesCollected_orderBy = blockTimestamp
  $directionFeeCollections: OrderDirection = desc
  # repaymentRecords
  $numRepayments: Int = 10
  $skipRepayments: Int = 0
  $orderRepayments: DebtRepaid_orderBy = blockTimestamp
  $directionRepayments: OrderDirection = desc
) {
  markets(
    orderBy: $orderMarkets
    orderDirection: $directionMarkets
    first: $numMarkets
    skip: $skipMarkets
  ) {
    ...MarketDataWithEvents
  }
}

query getMarket(
  $market: ID!
  # deposits
  $numDeposits: Int = 10
  $skipDeposits: Int = 0
  $orderDeposits: Deposit_orderBy = blockTimestamp
  $directionDeposits: OrderDirection = desc
  # borrowRecords
  $numBorrows: Int = 10
  $skipBorrows: Int = 0
  $orderBorrows: Borrow_orderBy = blockTimestamp
  $directionBorrows: OrderDirection = desc
  # feeCollections
  $numFeeCollections: Int = 10
  $skipFeeCollections: Int = 0
  $orderFeeCollections: FeesCollected_orderBy = blockTimestamp
  $directionFeeCollections: OrderDirection = desc
  # repaymentRecords
  $numRepayments: Int = 10
  $skipRepayments: Int = 0
  $orderRepayments: DebtRepaid_orderBy = blockTimestamp
  $directionRepayments: OrderDirection = desc
) {
  market(id: $market) {
    ...MarketDataWithEvents
  }
}

query getWithdrawalRequestsByMarket(
  $market: String!
  $numWithdrawals: Int = 1000
  $skipWithdrawals: Int = 0
  $orderWithdrawals: WithdrawalRequest_orderBy = blockTimestamp
  $directionWithdrawals: OrderDirection = desc
) {
  withdrawalRequests(
    orderBy: $orderWithdrawals
    orderDirection: $directionWithdrawals
    first: $numWithdrawals
    skip: $skipWithdrawals
    where: { batch_contains_nocase: $market }
  ) {
    ...WithdrawalRequestProperties
  }
}

query getAllPendingWithdrawalBatchesForMarket($market: ID!) {
  market(id: $market) {
    withdrawalBatches(where: { isClosed: false }) {
      ...WithdrawalBatchPropertiesWithEvents
    }
  }
}

query getAllMarkets {
  markets {
    ...MarketData
  }
}

query getAuthorizedLendersByMarket($market: ID!) {
  market(id: $market) {
    controller {
      authorizedLenders(where: { authorized: true }) {
        lender
      }
    }
  }
}

query getAuthorizedLendersByBorrower($filter: Controller_filter!) {
  controllers(where: $filter) {
    authorizedLenders(where: { authorized: true }) {
      lender
    }
  }
}

query getSubgraphStatus {
  _meta {
    hasIndexingErrors
    block {
      hash
      number
      timestamp
    }
  }
}

query getMarketRecords(
  $market: ID!
  # deposits
  $numDeposits: Int = 10
  $skipDeposits: Int = 0
  $orderDeposits: Deposit_orderBy = blockTimestamp
  $directionDeposits: OrderDirection = desc
  # borrowRecords
  $numBorrows: Int = 10
  $skipBorrows: Int = 0
  $orderBorrows: Borrow_orderBy = blockTimestamp
  $directionBorrows: OrderDirection = desc
  # feeCollections
  $numFeeCollections: Int = 10
  $skipFeeCollections: Int = 0
  $orderFeeCollections: FeesCollected_orderBy = blockTimestamp
  $directionFeeCollections: OrderDirection = desc
  # repaymentRecords
  $numRepayments: Int = 10
  $skipRepayments: Int = 0
  $orderRepayments: DebtRepaid_orderBy = blockTimestamp
  $directionRepayments: OrderDirection = desc
) {
  market(id: $market) {
    ...MarketRecords
  }
}
