# import './fragments.graphql'

# -------------------------------------------------------------------------- #
#                                Lender Views                                #
# -------------------------------------------------------------------------- #

fragment AccountDataForLenderView on LenderAccount {
  ...LenderProperties
  controllerAuthorization {
    authorized
  }

  deposits(
    first: $numDeposits
    skip: $skipDeposits
    orderBy: $orderDeposits
    orderDirection: $directionDeposits
  ) {
    ...DepositData
  }
}

fragment LenderProperties on LenderAccount {
  id
  address
  scaledBalance
  role
  totalDeposited
  lastScaleFactor
  lastUpdatedTimestamp
  totalInterestEarned
  numPendingWithdrawalBatches
}

# ---------------------------------------------------------------------------- #
#                                Borrower Views                                #
# ---------------------------------------------------------------------------- #

fragment MarketData on Market {
  id

  # --------------------------------- Config --------------------------------- #
  isRegistered
  isClosed
  controller {
    id
  }
  borrower
  sentinel
  feeRecipient
  name
  symbol
  decimals
  protocolFeeBips
  delinquencyGracePeriod
  delinquencyFeeBips
  withdrawalBatchDuration

  _asset: asset {
    id
    address
    name
    symbol
    decimals
    isMock
  }

  # ---------------------------------- State --------------------------------- #
  maxTotalSupply
  pendingProtocolFees
  normalizedUnclaimedWithdrawals
  scaledTotalSupply
  scaledPendingWithdrawals
  pendingWithdrawalExpiry
  isDelinquent
  timeDelinquent
  annualInterestBips
  reserveRatioBips
  scaleFactor
  lastInterestAccruedTimestamp
  originalAnnualInterestBips
  originalReserveRatioBips
  temporaryReserveRatioExpiry
  temporaryReserveRatioActive

  # -------------------------------- Metadata -------------------------------- #
  totalBorrowed
  totalRepaid
  totalBaseInterestAccrued
  totalDelinquencyFeesAccrued
  totalProtocolFeesAccrued
  totalDeposited
  eventIndex

  deployedEvent {
    ...MarketDeployedEvent
  }
}

fragment AprConstraints on ParameterConstraints {
  minimumAnnualInterestBips
  maximumAnnualInterestBips
}

# ---------------------------------------------------------------------------- #
#                                    Events                                    #
# ---------------------------------------------------------------------------- #

fragment DelinquencyStatusChangedData on DelinquencyStatusChanged {
  id
  eventIndex
  isDelinquent
  liquidityCoverageRequired
  totalAssets
  blockNumber
  blockTimestamp
  transactionHash
}

fragment DepositData on Deposit {
  id
  eventIndex
  account {
    address
  }
  assetAmount
  scaledAmount
  blockNumber
  blockTimestamp
  transactionHash
}

fragment MarketDeployedEvent on MarketDeployed {
  blockNumber
  blockTimestamp
  transactionHash
}

fragment MarketDataWithEvents on Market {
  ...MarketData
  ...MarketRecords
}

fragment WithdrawalBatchPaymentProperties on WithdrawalBatchPayment {
  id
  scaledAmountBurned
  normalizedAmountPaid
  blockNumber
  blockTimestamp
  transactionHash
}
fragment WithdrawalRequestProperties on WithdrawalRequest {
  id
  eventIndex
  requestIndex
  account {
    address
  }
  scaledAmount
  normalizedAmount
  blockNumber
  blockTimestamp
  transactionHash
}
fragment WithdrawalExecutionProperties on WithdrawalExecution {
  id
  account {
    address
  }
  normalizedAmount
  blockNumber
  blockTimestamp
  transactionHash
}

fragment LenderWithdrawalProperties on LenderWithdrawalStatus {
  id
  account {
    address
  }
  requestsCount
  executionsCount
  scaledAmount
  normalizedAmountWithdrawn
  totalNormalizedRequests
  isCompleted
}

fragment LenderWithdrawalPropertiesWithEvents on LenderWithdrawalStatus {
  ...LenderWithdrawalProperties

  batch {
    ...WithdrawalBatchProperties
  }
  requests {
    ...WithdrawalRequestProperties
  }
  executions {
    ...WithdrawalExecutionProperties
  }
}

fragment WithdrawalBatchProperties on WithdrawalBatch {
  id
  expiry
  scaledTotalAmount
  scaledAmountBurned
  normalizedAmountPaid
  normalizedAmountClaimed
  totalNormalizedRequests
  isExpired
  isClosed
  paymentsCount
  lastScaleFactor
  lastUpdatedTimestamp
  totalInterestEarned

  creation {
    blockNumber
    blockTimestamp
    transactionHash
  }

  payments {
    ...WithdrawalBatchPaymentProperties
  }
}

fragment WithdrawalBatchPropertiesWithEvents on WithdrawalBatch {
  ...WithdrawalBatchProperties

  withdrawals {
    ...LenderWithdrawalProperties
  }
  requests {
    ...WithdrawalRequestProperties
  }
  executions {
    ...WithdrawalExecutionProperties
  }
}

fragment MarketRecords on Market {
  depositRecords(
    first: $numDeposits
    skip: $skipDeposits
    orderBy: $orderDeposits
    orderDirection: $directionDeposits
  ) {
    ...DepositData
  }
  borrowRecords(
    first: $numBorrows
    skip: $skipBorrows
    orderBy: $orderBorrows
    orderDirection: $directionBorrows
  ) {
    ...BorrowData
  }
  feeCollectionRecords(
    first: $numFeeCollections
    skip: $skipFeeCollections
    orderBy: $orderFeeCollections
    orderDirection: $directionFeeCollections
  ) {
    ...FeesCollectedData
  }
  repaymentRecords(
    first: $numRepayments
    skip: $skipRepayments
    orderBy: $orderRepayments
    orderDirection: $directionRepayments
  ) {
    ...RepaymentData
  }
}

fragment BorrowData on Borrow {
  eventIndex
  assetAmount
  blockNumber
  blockTimestamp
  transactionHash
}

fragment RepaymentData on DebtRepaid {
  eventIndex
  from
  assetAmount
  blockNumber
  blockTimestamp
  transactionHash
}

fragment FeesCollectedData on FeesCollected {
  eventIndex
  feesCollected
  blockNumber
  blockTimestamp
  transactionHash
}

fragment AnnualInterestBipsUpdatedData on AnnualInterestBipsUpdated {
  eventIndex
  oldAnnualInterestBips
  newAnnualInterestBips
  blockNumber
  blockTimestamp
  transactionHash
}

fragment MaxTotalSupplyUpdatedData on MaxTotalSupplyUpdated {
  eventIndex
  oldMaxTotalSupply
  newMaxTotalSupply
  blockNumber
  blockTimestamp
  transactionHash
}

fragment MarketClosedData on MarketClosed {
  eventIndex
  blockNumber
  blockTimestamp
  transactionHash
}